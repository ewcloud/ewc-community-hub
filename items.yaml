apiVersion: communityhub.europeanweather.cloud/v1alpha1
kind: CommunityHubCatalog
spec:
  items:
    ai-models:
      name: "ai-models"
      version: "1.0.1"
      description: |
        Create a conda environment with the ai-models package and associated plugins to run a set of data-driven weather forecasting models such as panguweather or graphcast. 

        Requirements
        ------------
        This ansible role depends on ewc-ansible-role-conda.

        Role Variables
        --------------
        - `ai_models_env_wipe`: Boolean to decide whether to wipe the environment if exists prior to a reinstallation. Default: no
        - `ai_models_env_name`: Name of the environment containing the software stack. Default: ml-basic
        - `ai_models_env_path`: Path to the environment containing the software stack. Default: `{{ conda_prefix }}/envs/{{ ai_models_env_name }}`
        - `ai_models_create_ipykernel`: Boolean to create a system-wide kernel available. Default: yes
        - `conda_prefix`: Prefix where conda is installed. Default: `/opt/conda`
        - `conda_user`: User owning the conda installation. Default: `root`

        Example Playbook
        ----------------

            - hosts: all
              roles:
                -  ewc-ansible-role-ai-models

        License
        -------

        Apache 2.0.

        Author Information
        ------------------

        ECMWF for the European Weather Cloud
        
        <img src="https://climate.copernicus.eu/sites/default/files/inline-images/ECMWF.png"  width="120px" height="120px"> 
        
        ![ewc logo](https://europeanweather.cloud/sites/default/files/images/cloud-data-network-SW-v3.png){width=120px  height=120px}

      ewccli:
        pathToMainFile: playbooks/ai-models/ai-models.yml
      home: https://github.com/ewcloud/ewc-ecmwf-ai-stacks
      sources:
        - https://github.com/ewcloud/ewc-ecmwf-ai-stacks.git
      maintainers:
        - name: EWC Team
          email: support@europeanweather.cloud
          url: https://github.com/ewcloud/ewc-ecmwf-ai-stacks/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/EWCLogo.png
      annotations:
        technology: "Ansible Playbook"
        category: "Machine Learning & AI, GPU-accelerated"
        supportLevel: "EWC"
        licenseType: "Apache License 2.0"
        others: "Deployable,EWCCLI-compatible"
      displayName: AI Models
      summary: It features the most popular data driven forecast models such as Pangu Weather, Fourcastnet or graphcast.
      license: https://github.com/ewcloud/ewc-ecmwf-ai-stacks/blob/main/LICENSE
      published: true

    ewc-ansible-playbook-ipa-enroll-automation-via-morpheus:
      name: "ewc-ansible-playbook-ipa-enroll-automation-via-morpheus:"
      version: "1.0.0"
      description: |
        This repository contains a configuration template
        (i.e. an [Ansible Playbook](https://docs.ansible.com/ansible/latest/playbook_guide/playbooks.html))
        to customize your environment in the
        [European Weather Cloud (EWC)](https://europeanweather.cloud/).
        Applying this template will trigger the configuration of [Morpheus](https://morpheusdata.com/)
        entities, enabling you to edit/automate management of EWC computer resources'
        life cycle via a web-based graphical user interphase (GUI).

        Assuming an [IPA server](https://www.freeipa.org/) is already provisioned
        and configured within the EWC environment, this template simplifies the remaining 
        configuration to a one-time setup for Morpheus (i.e. Morpheus 
        Integration, Tasks, Workflow and Network Domain) such that:
        * New virtual machines created via the Morpheus GUI, within
        a user-defined Morpheus Network Domain, will enroll onto a the IPA server's
        provided DNS and LDAP services.
        * Enrolled virtual machines will disenroll from the IPA server upon
        their deletion via Morpheus GUI

        ## Usage

        ### 1. Configure and apply the template

        #### 1.1. Interactive Mode

        By running the following command, you can trigger an interactive session that
        prompts you for the necessary user inputs, and then applies changes to your
        target EWC environment:
        ```bash
        ansible-playbook ipa-enroll-automation.yml
        ```

        #### 1.2. Non-Interactive Mode

        >üí° To learn more about defining variables at runtime, checkout the
        [official Ansible documentation](https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_variables.html).

        Although not recommended, you can also run in non-interactive mode by passing the
        `--extra-vars` o `-e` flag, followed by a `"<input name>=<input value>"` key-value pair.
        The flag and its follow up key-value pair must be set for each and every input ([see inputs section below](#inputs)):
        ```bash
        ansible-playbook  \
          -e "morpheus_api_token_override=abcdef12-34567-890a-bcde-f1234567890" \
          -e "morpheus_api_url_override=https://hcmp.icsi.eumetsat.int" \
          # ...
          # all remaining input overrides
          # ...
          -e "morpheus_cypher_ipa_admin_password_override=my-secret-password" \
          ipa-enroll-automation.yml
          ```
        ### 2. Manually link the Morpheus Workflow to the user-defined Morpheus Domain
        > ‚ö†Ô∏è As of 17.07.2025, technical limitations on the side of the
        [Morpheus API](https://apidocs.morpheusdata.com/v7.0.9/reference/createnetworkdomain)
        lead to unreliable configuration of links between workflows and domains.
        As a workaround, manual action over the Morpheus GUI is required.

        Finalize the configuration over the Morpheus GUI:

        1. Login to the Morpheus GUI of your EWC environment
        2. From the top navigation bar, go to `Infrastructure > Network`.
        3. Select `Domains` from the sub navigation bar.
        4. A table will be displayed in the lower portion of the view port, and
        containing details of available domains in your EWC environment. Click on the
        edit icon (`üñâ`) on the same row where your defined domain is listed.
        5. Within the pop-up edit form, click on the `Select Workflow` drop-down
        menu and select `ipa-enroll-automation`. Click on `SAVE CHANGES` at the
        bottom of the form to finalize the setup.

        ## Inputs
        > ‚ö†Ô∏è If set, the `update_morpheus_cypher` flag will trigger the creation/edition of secrets within Morpheus Cypher.
        To avoid unexpected behavior during IPA clients enrollment, ensure the values of all input secrets (i.e. those with
        `morpheus_cypher_` prefix) are set and match to the values used during the initial IPA server configuration in your
        EWC environment.

        | Name | Description | Type | Default | Required |
        |------|-------------|------|---------|----------|
        | morpheus_api_token_override | access token of the Morpheus API | `string` | n/a | yes |
        | morpheus_api_url_override| Morpheus API URL. Examples: `https://morpheus.ecmwf.int`, `https://hcmp.icsi.eumetsat.int` | `string` | n/a | yes |
        | morpheus_tenant_name_override| Morpheus tenant name.  Example: `<memberstate>-<organization>-<projectname>` | `string` | n/a | yes |
        | update_morpheus_cypher_override | flag to update required secrets in Morpheus Cypher. Only `yes` will be accepted to approve | `string` | n/a | yes |
        | morpheus_cypher_ipa_domain_override | name of domain managed by the IPA server. Must match with the value set used during used during configuration of a pre-existing IPA server within the EWC environment. Example: `<memberstate>-<organization>-<projectname>.ewc` | `string` | n/a | yes |
        | morpheus_cypher_ipa_server_hostname_override | hostname of the IPA server. Must match with the value set used during used during configuration of a pre-existing IPA server within the EWC environment. Example: `ipa-server` | `string` | n/a | no |
        | morpheus_cypher_ipa_admin_username_override | username of IPA Directory Manager/Admin. Must match with the value set used during used during configuration of a pre-existing IPA server within the EWC environment. Example: `ipa-admin` | `string` | n/a | no |
        | morpheus_cypher_ipa_admin_password_override | password of IPA Directory Manager/Admin. Must match with the value set used during used during configuration of a pre-existing IPA server within the EWC environment | `string` | n/a | no |

        ## Outputs

        | Name | Type | Description |
        |------|---------|---------|
        | `ewc-flavours` | Morpheus Integration | Links to EWC Community Hub's GitHub repository where Ansible Playbooks for IPA client enrollment/disenrollment are published |
        | `ipa-client-enroll` | Morpheus Task | Executes an Ansible Playbook to carry out IPA client enrollment |
        | `ipa-client-disenroll` | Morpheus Task |  Executes an Ansible Playbook to perform IPA client disenrollment |
        | `ipa-enroll-automation` | Morpheus Workflow | Orchestrates tasks to run specifically during provision and teardown stages of a virtual machine's life cycle  |
        | `<user defined>` | Morpheus Domain | Encapsulates virtual machines and automates workflow triggering |
        | `secret/ipa_domain` | Morpheus Cypher Secret | Read during enrollment/disenrollment Ansible Playbooks execution |
        | `secret/ipa_server_hostname` | Morpheus Cypher Secret | Read during enrollment/disenrollment Ansible Playbooks execution |
        | `secret/ipa_admin_username` | Morpheus Cypher Secret | Read during enrollment/disenrollment Ansible Playbooks execution |
        | `secret/ipa_admin_password` | Morpheus Cypher Secret | Read during enrollment/disenrollment Ansible Playbooks execution |

      home: https://github.com/ewcloud/ewc-ansible-playbook-ipa-enroll-automation-via-morpheus/tree/1.0.0
      sources:
        - https://github.com/ewcloud/ewc-ansible-playbook-ipa-enroll-automation-via-morpheus.git
      maintainers:
        - name: EWC Team
          email: support@europeanweather.cloud
          url: https://github.com/ewcloud/ewc-ansible-playbook-ipa-enroll-automation-via-morpheus/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/EWCLogo.png
      annotations:
        technology: "Ansible Playbook"
        category: "Security,Identity & Access Management"
        others: "Deployable"
        supportLevel: "EWC"
        licenseType: "MIT License"
      displayName: IPA Enroll/Disenroll Automation Configuration
      summary: Configures Morpheus (i.e. EWC's graphical control plane) to automate the enrollment/disenrollment of VMs, provisioned via the UI, into a fleet of IPA-aware instances.
      license: https://github.com/ewcloud/ewc-ansible-playbook-ipa-enroll-automation-via-morpheus/blob/1.0.0/LICENSE
      published: false

    ewc-tf-module-openstack-compute:
      name: "ewc-tf-module-openstack-compute"
      version: "1.4.0"
      description: |
        This [Terraform module](https://developer.hashicorp.com/terraform/language/modules) creates and
        configures [OpenStack compute](https://docs.openstack.org/nova/latest/)
        instances with optional attached storage volumes and networking configurations.

        ## Features

        - Create OpenStack compute instances with customizable configurations
        - Optionally boot from volume with configurable size
        - Support for attaching additional volumes
        - Floating IP assignment for public access
        - Security group configuration
        - Integration with cloud-init for instance initialization
        - Flexible networking options
        - Resource tagging support with automatic app_name tagging

        ## Usage

        ```hcl
        module "web_server" {
          source = "path/to/openstack-compute"

          app_name       = "web"
          instance_name  = "server"
          instance_index = 1
          image_id       = "your-image-id"
          flavor_id      = "your-flavor-id"
          keypair_name   = "your-keypair-name"
          
          networks = ["internal"]
          
          instance_has_fip = true
          
          os_volume = {
            enable = true
            size   = 80
          }
          
          extra_volume      = true
          extra_volume_size = 100
          
          security_groups = ["default", "web"]
          
          instance_metadata = {
            environment = "production"
            role        = "web"
          }
          
          tags = {
            environment = "production"
            project     = "website"
            owner       = "team-alpha"
          }
        }
        ```

        ## Inputs

        | Name | Description | Type | Default | Required |
        |------|-------------|------|---------|:--------:|
        | app_name | Application name, used as prefix in the full instance name | `string` | n/a | yes |
        | instance_name | Name of the instance, used in the full instance name | `string` | n/a | yes |
        | instance_index | Index or identifier for the instance, used as suffix in the full instance name | `number` | n/a | yes |
        | image_id | (Optional; Required if image_name is empty and not booting from a volume. Do not specify if booting from a volume.) The image ID to use for the instance  | `string` | n/a | no |
        | flavor_id | (Optional; Required if flavor_name is empty) The flavor ID to use for the instance | `string` | n/a | no |
        | image_name | (Optional; Required if image_id is empty and not booting from a volume. Do not specify if booting from a volume.) The name of the image to use for the instance  | `string` | n/a | no |
        | flavor_name | (Optional; Required if flavor_id is empty) The name the flavor to use for the instance | `string` | n/a | no |
        | keypair_name | Name of the keypair to use for SSH access to the instance | `string` | n/a | yes |
        | networks | List of network names to attach the instance to | `list(string)` | n/a | yes |
        | security_groups | List of security group names to apply to the instance | `list(string)` | `["default"]` | no |
        | instance_has_fip | Whether to assign a floating IP to the instance | `bool` | `false` | no |
        | os_volume | Configuration for the primary OS volume | `object({enable = bool, size = number})` | `{enable = false, size = 50}` | no |
        | extra_volume | Whether to attach an additional volume to the instance | `bool` | `false` | no |
        | extra_volume_size | Size in GB of the additional volume | `number` | `1` | no |
        | extra_volume2 | Whether to attach a second additional volume to the instance | `bool` | `false` | no |
        | extra_volume2_size | Size in GB of the second additional volume | `number` | `1` | no |
        | cloudinit_userdata | User data for cloud-init to be passed to the instance | `string` | `null` | no |
        | instance_metadata | Metadata to associate with the instance (key-value pairs) | `map(string)` | `null` | no |
        | add_sfs_network | Shared File System network to add (if needed) | `string` | `null` | no |
        | external_network_name | Name of the external network for floating IPs | `string` | `"external"` | no |
        | tags | A map of tags to assign to all resources that support it | `map(string)` | `{}` | no |

        ## SW Bill of Materials (SBoM)
        Third-party components used in the working environment.

        The following components will be included in the working environment:
        | Component | Version | License | Home URL |
        |------|---------|---------|--------------|
        | terraform-provider-openstack | 1.53.0 |  MPL-2.0 |  https://github.com/terraform-provider-openstack/terraform-provider-openstack   |

        ## Outputs

        | Name | Description |
        |------|-------------|
        | instance-data | Comprehensive information about the created instance |
        | volumes | Information about the attached volumes |

        ## Instance Output Structure

        ```hcl
        {
          name           = "app-name-instance-name-01"
          id             = "instance-id"
          internal_ip    = "192.168.1.10"
          floating_ip    = "203.0.113.10"
          networks       = [/* Network details */]
          flavor_id      = "flavor-id"
          volumes        = ["volume-id-1", "volume-id-2"]
          access_address = "203.0.113.10"  # or internal IP if no floating IP
        }
        ```

        ## Volumes Output Structure

        ```hcl
        {
          primary  = "volume-id-primary"  # if os_volume.enable = true
          volume_1 = {
            id   = "volume-id-1"
            name = "app_name_instance_name_01_volume"
            size = 100
          }
          volume_2 = {
            id   = "volume-id-2"
            name = "app_name_instance_name_01_volume2"
            size = 50
          }
        }
        ```

      home: https://github.com/ewcloud/ewc-tf-module-openstack-compute/tree/1.4.0
      sources:
        - https://github.com/ewcloud/ewc-tf-module-openstack-compute.git
      maintainers:
        - name: EWC Team
          email: support@europeanweather.cloud
          url: https://github.com/ewcloud/ewc-tf-module-openstack-compute/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/EWCLogo.png
      annotations:
        technology: "Terraform Module"
        category: "Compute"
        others: "Deployable"
        supportLevel: "EWC"
        licenseType: "MIT License"
      displayName: OpenStack Compute Instance
      summary: Simplifies the creation of EWC VMs, or state update and teardown of existing ones, via Terraform.
      license: https://github.com/ewcloud/ewc-tf-module-openstack-compute/blob/1.4.0/LICENSE
      published: true

    ewc-tf-module-openstack-security-group:
      name: "ewc-tf-module-openstack-security-group"
      version: "1.0.0"
      description: |
        > üí° The module supports complex rule sets, such as those required to create a subnet security group for IPA services (i.e. Kerberos, LDAP and DNS).

        This Terraform module creates and configures an OpenStack Security Group with a user-defined set of rules. It is designed to be reusable, flexible, and aligned with Terraform best practices for OpenStack deployments. 

        More specifically, the module:
        * Creates an OpenStack Security Group with customizable name and description.
        * Attaches an arbitrary number of user-defined rules to the security group.

        ## Usage

        ```hcl
        module "ipa_security_group" {
          source = "/path/to/terraform/module"

          security_group_name = "ipa"

          security_group_rules = [
            {
              direction        = "ingress"
              ether_type       = "IPv4"
              protocol         = "tcp"
              port_range_min   = 80
              port_range_max   = 80
              remote_ip_prefix = "0.0.0.0/0"
            },
            {
              direction        = "ingress"
              ether_type       = "IPv4"
              protocol         = "udp"
              port_range_min   = 123
              port_range_max   = 123
              remote_ip_prefix = "0.0.0.0/0"
            },
            {
              direction        = "ingress"
              ether_type       = "IPv4"
              protocol         = "tcp"
              port_range_min   = 88
              port_range_max   = 88
              remote_ip_prefix = "0.0.0.0/0"
            },
            {
              direction        = "ingress"
              ether_type       = "IPv4"
              protocol         = "udp"
              port_range_min   = 88
              port_range_max   = 88
              remote_ip_prefix = "0.0.0.0/0"
            },
            {
              direction        = "ingress"
              ether_type       = "IPv4"
              protocol         = "tcp"
              port_range_min   = 53
              port_range_max   = 53
              remote_ip_prefix = "0.0.0.0/0"
            },
            {
              direction        = "ingress"
              ether_type       = "IPv4"
              protocol         = "udp"
              port_range_min   = 53
              port_range_max   = 53
              remote_ip_prefix = "0.0.0.0/0"
            },
            {
              direction        = "ingress"
              ether_type       = "IPv4"
              protocol         = "tcp"
              port_range_min   = 389
              port_range_max   = 389
              remote_ip_prefix = "0.0.0.0/0"
            },
            {
              direction        = "ingress"
              ether_type       = "IPv4"
              protocol         = "tcp"
              port_range_min   = 22
              port_range_max   = 22
              remote_ip_prefix = "0.0.0.0/0"
            },
            {
              direction        = "ingress"
              ether_type       = "IPv4"
              protocol         = "tcp"
              port_range_min   = 636
              port_range_max   = 636
              remote_ip_prefix = "0.0.0.0/0"
            },
            {
              direction        = "ingress"
              ether_type       = "IPv4"
              protocol         = "tcp"
              port_range_min   = 464
              port_range_max   = 464
              remote_ip_prefix = "0.0.0.0/0"
            },
            {
              direction        = "ingress"
              ether_type       = "IPv4"
              protocol         = "udp"
              port_range_min   = 464
              port_range_max   = 464
              remote_ip_prefix = "0.0.0.0/0"
            },
            {
              direction        = "ingress"
              ether_type       = "IPv4"
              protocol         = "tcp"
              port_range_min   = 443
              port_range_max   = 443
              remote_ip_prefix = "0.0.0.0/0"
            }
          ]

          tags = {
            environment       = "production"
            project           = "ewc"
            provisioning-tool = "terraform"
          }
        }
        ```

        ## Inputs

        | Name | Description | Type | Default | Required |
        |------|-------------|------|---------|:--------:|
        | `security_group_name` | Name of the security group. Example: `ipa` | `string` | n/a | yes |
        | `security_group_description` | Description of the security group | `string` | n/a | no |
        | `security_group_rules` | List of security group rules | `list(object({direction = string, ether_type = string, protocol = string, port_range_min = number, port_range_max = number, remote_ip_prefix = string}))` | `[]` | no |
        | `tags` | Map of tags to assign to the security group | `map(string)` | `{}` | no |

        ### Security Group Rules Input Structure

        Each rule in the `security_group_rules` list is an object with the following attributes:

        - `direction`: The direction of the rule (`ingress` or `egress`).
        - `ether_type`: The ether type (`IPv4` or `IPv6`).
        - `protocol`: The protocol (e.g., `tcp`, `udp`, `icmp`, or `null` for any).
        - `port_range_min`: The minimum port number (1-65535, or `null` for protocols like `icmp`).
        - `port_range_max`: The maximum port number (1-65535, or `null` for protocols like `icmp`).
        - `remote_ip_prefix`: The remote IP prefix in CIDR notation (e.g., `0.0.0.0/0`).

        ## SW Bill of Materials (SBoM)
        Third-party components used in the working environment.

        The following components will be included in the working environment:
        | Component | Version | License | Home URL |
        |------|---------|---------|--------------|
        | terraform-provider-openstack | 1.53.0 |  MPL-2.0 |  https://github.com/terraform-provider-openstack/terraform-provider-openstack   |

        ## Outputs

        | Name | Description |
        |------|-------------|
        | `security_group_id` | ID of the created security group |
        | `security_group_name` | Name of the created security group |
        | `security_group_rules` | List of created security group rule IDs |
 
      home: https://github.com/ewcloud/ewc-tf-module-openstack-security-group/tree/1.0.0
      sources:
        - https://github.com/ewcloud/ewc-tf-module-openstack-security-group.git
      maintainers:
        - name: EWC Team
          email: support@europeanweather.cloud
          url: https://github.com/ewcloud/ewc-tf-module-openstack-security-group/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/EWCLogo.png
      annotations:
        technology: "Terraform Module"
        category: "Network"
        others: "Deployable"
        supportLevel: "EWC"
        licenseType: "MIT License"
      displayName: OpenStack Security Group
      summary: Automates the creation of EWC security groups and their rules, or update and teardown of existing ones, via Terraform.
      license: https://github.com/ewcloud/ewc-tf-module-openstack-security-group/blob/1.0.0/LICENSE
      published: true

    ecmwf-aifs-single-mse:
      name: "ecmwf-aifs-single-mse"
      version: "1.0.1"
      description: |
        Create a conda environment with AIFS Single MSE and associated software stack.

        Requirements
        ------------

        This ansible role depends on ewc-ansible-role-conda and needs to be applied on a GPU-powered instance.

        Role Variables
        --------------

        - `aifs_single_mse_env_wipe`: Boolean to decide whether to wipe the environment if exists prior to a reinstallation. Default: no
        - `aifs_single_mse_env_name`: Name of the environment containing the software stack. Default: aifs-single-mse
        - `aifs_single_mse_env_path`: Installation path for the environment. Default: "{{ conda_prefix }}/envs/{{ aifs_single_mse_env_name }}"
        - `aifs_single_mse_checkpoint`: URL to the model checkpoint. Default: https://huggingface.co/ecmwf/aifs-single-1.0/resolve/main/aifs-single-mse-1.0.ckpt
        - `aifs_single_mse_create_ipykernel`: Create the jupyter kernel for this environment. Default: yes
        - `conda_prefix`: Prefix where conda is installed. Default: `/opt/conda`
        - `conda_user`: User owning the conda installation. Default: `root`

        Example Playbook
        ----------------

            - hosts: all
              roles:
                -  ewc-ansible-role-aifs-single-mse

        License
        -------

        Apache 2.0.

        Author Information
        ------------------

        ECMWF for the European Weather Cloud
        
        <img src="https://climate.copernicus.eu/sites/default/files/inline-images/ECMWF.png"  width="120px" height="120px"> 
        
        ![ewc logo](https://europeanweather.cloud/sites/default/files/images/cloud-data-network-SW-v3.png){width=120px  height=120px}

      ewccli:
        pathToMainFile: playbooks/aifs-single-mse/aifs-single-mse.yml
      home: https://github.com/ewcloud/ewc-ecmwf-ai-stacks
      sources:
        - https://github.com/ewcloud/ewc-ecmwf-ai-stacks.git
      maintainers:
        - name: EWC Team
          email: support@europeanweather.cloud
          url: https://github.com/ewcloud/ewc-ecmwf-ai-stacks/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/EWCLogo.png
      annotations:
        technology: "Ansible Playbook"
        category: "Machine Learning & AI, GPU-accelerated"
        supportLevel: "EWC"
        licenseType: "Apache License 2.0"
        others: "Deployable,EWCCLI-compatible"
      displayName: ECMWF AIFS Single MSE
      summary: It features the ECMWF AIFS Single data-driven model
      license: https://github.com/ewcloud/ewc-ecmwf-ai-stacks/blob/main/LICENSE
      published: true

    ecmwf-aifs-ens-crps:
      name: "ecmwf-aifs-ens-crps"
      version: "1.0.1"
      description: |
        Create a conda environment with AIFS ENS CRPS data-driven model and associated software stack.
        Featuring the ECMWF AIFS ENS CRPS data-driven model. Find more information in <https://huggingface.co/ecmwf/aifs-ens-1.0>

        Requirements
        ------------

        This ansible role depends on ewc-ansible-role-conda and needs to be applied on a GPU-powered instance.

        Role Variables
        --------------

        - `aifs_ens_crps_env_wipe`: Boolean to decide whether to wipe the environment if exists prior to a reinstallation. Default: no
        - `aifs_ens_crps_env_name`: Name of the environment containing the ECMWF toolbox. Default: aifs-ens-crps
        - `aifs_ens_crps_create_ipykernel`: Boolean to create a system-wide kernel available. Default: yes
        - `conda_prefix`: Prefix where conda is installed. Default: `/opt/conda`
        - `conda_user`: User owning the conda installation. Default: `root`
        - `conda_prefix`: Prefix where conda is installed. Default: `/opt/conda`
        - `conda_user`: User owning the conda installation. Default: `root`

        Example Playbook
        ----------------

            - hosts: all
              roles:
                -  ewc-ansible-role-aifs-ens-crps

        License
        -------

        Apache 2.0.

        Author Information
        ------------------

        ECMWF for the European Weather Cloud
        
        <img src="https://climate.copernicus.eu/sites/default/files/inline-images/ECMWF.png"  width="120px" height="120px"> 
        
        ![ewc logo](https://europeanweather.cloud/sites/default/files/images/cloud-data-network-SW-v3.png){width=120px  height=120px}

      ewccli:
        pathToMainFile: playbooks/aifs-ens-crps/aifs-ens-crps.yml
      home: https://github.com/ewcloud/ewc-ecmwf-ai-stacks
      sources:
        - https://github.com/ewcloud/ewc-ecmwf-ai-stacks.git
      maintainers:
        - name: EWC Team
          email: support@europeanweather.cloud
          url: https://github.com/ewcloud/ewc-ecmwf-ai-stacks/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/EWCLogo.png
      annotations:
        technology: "Ansible Playbook"
        category: "Machine Learning & AI, GPU-accelerated"
        supportLevel: "EWC"
        licenseType: "Apache License 2.0"
        others: "Deployable,EWCCLI-compatible"
      displayName: ECMWF AIFS ENS CRPS
      summary: It features the ECMWF AIFS ENS CRPS data-driven model
      license: https://github.com/ewcloud/ewc-ecmwf-ai-stacks/blob/main/LICENSE
      published: true

    ecmwf-anemoi:
      name: "ecmwf-anemoi"
      version: "1.0.1"
      ewccli:
        pathToMainFile: anemoi.yml
      description: |
        Create a conda environment with the Anemoi framework for weather forecasting based on machine learning and associated software stack.
        
        Requirements
        ------------

        This ansible role depends on ewc-ansible-role-conda and needs to be applied on a GPU-powered instance if training or inference are used.

        Role Variables
        --------------

        - `anemoi_env_wipe`: Boolean to decide whether to wipe the environment if exists prior to a reinstallation. Default: no
        - `anemoi_env_name`: Name of the environment containing the software stack. Default: aifs-single-mse
        - `anemoi_env_path`: Installation path for the environment. Default: "{{ conda_prefix }}/envs/{{ anemoi_env_name }}"
        - `anemoi_create_ipykernel`: Create the jupyter kernel for this environment. Default: yes
        - `conda_prefix`: Prefix where conda is installed. Default: `/opt/conda`
        - `conda_user`: User owning the conda installation. Default: `root`

        Example Playbook
        ----------------

            - hosts: all
              roles:
                -  ewc-ansible-role-anemoi

        License
        -------

        Apache 2.0.

        Author Information
        ------------------

        ECMWF for the European Weather Cloud
        
        <img src="https://climate.copernicus.eu/sites/default/files/inline-images/ECMWF.png"  width="120px" height="120px"> 
        
        ![ewc logo](https://europeanweather.cloud/sites/default/files/images/cloud-data-network-SW-v3.png){width=120px  height=120px}

      home: https://github.com/ewcloud/ewc-ecmwf-ai-stacks
      sources:
        - https://github.com/ewcloud/ewc-ecmwf-ai-stacks.git
      maintainers:
        - name: EWC Team
          email: support@europeanweather.cloud
          url: https://github.com/ewcloud/ewc-ecmwf-ai-stacks/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/EWCLogo.png
      annotations:
        technology: "Ansible Playbook"
        category: "Machine Learning & AI, GPU-accelerated"
        supportLevel: "EWC"
        licenseType: "Apache License 2.0"
        others: "Deployable,EWCCLI-compatible"
      displayName: ECMWF Anemoi
      summary: It leverages the Anemoi framework to develop and run your AI-models or manage datasets.
      license: https://github.com/ewcloud/ewc-ecmwf-ai-stacks/blob/main/LICENSE
      published: true

    ecmwf-data-flavour:
      annotations:
        technology: "Ansible Playbook"
        category: "Compute,Data Access"
        supportLevel: "EWC"
        licenseType: "Apache License 2.0"
        others: "Deployable,EWCCLI-compatible"
      description: |
        Includes the basic ECMWF software stack, with MARS client and an environment with `ecCodes`, `Metview`, `Earthkit` and `Aviso`.
        
        Getting started
        ---------------
        
        * Clone or download the code from the source repository.
        * Install ansible and other dependencies. You may want to do it in its own virtual environment (`pip install -r requirements.txt`)
        * Fetch the external requirements
          ```bash
          $ ansible-galaxy role install -r requirements.yml roles/
          ```
        
        * Define your inventory in `inventory`
        * Run the apropriate playbook 
        
          ```bash
          $ ansible-playbook -i inventory ecmwf-data-flavour.yml
          ```

        You may use the following ansible variables to customise this playbook:
        
        | Variable | Description | Type | Default | Required |
        |------|-------------|------|---------|----------|
        | reboot_if_required | Reboot the instance if required after an update. | `boolean`| `true` | no |
        | ecmwf_toolbox_env_wipe | Decide whether to wipe the environment if exists prior to a reinstallation. | `boolean` | `no` | no |
        | ecmwf_toolbox_env_wipe | Name of the environment containing the ECMWF toolbox. | `string` | `ecmwf-toolbox` | no |
        | ecmwf_toolbox_create_ipykernel | Create a system-wide kernel available. | `boolean` | yes | no |
        | conda_prefix | Prefix where conda is installed. | `string` | `/opt/conda` | no |
        | conda_user | User owning the conda installation. | `string` | `root` | no |
      
        Example usage:
      
        ```bash
        ansible-playbook -i inventory ecmwf-data-flavour.yml
        ```
        
        Author
        ------------------
        ECMWF for the European Weather Cloud
        
        <img src="https://climate.copernicus.eu/sites/default/files/inline-images/ECMWF.png"  width="120px" height="120px"> 
        
        ![ewc logo](https://europeanweather.cloud/sites/default/files/images/cloud-data-network-SW-v3.png){width=120px  height=120px}

      displayName: ECMWF Data Flavour
      ewccli:
        inputs:
          - name: reboot_if_required
            default: true
            description: Boolean to reboot the instance if required after an update.
            type: bool
          - name: ecmwf_toolbox_env_wipe
            default: false
            description: Boolean to decide whether to wipe the environment if exists prior to a reinstallation.
            type: bool
          - name: ecmwf_toolbox_env_name
            default: "ecmwf-toolbox"
            description: Name of the environment containing the ECMWF toolbox.
            type: str
          - name: ecmwf_toolbox_create_ipykernel
            default: true
            description: Boolean to create a system-wide kernel available.
            type: bool
          - name: conda_prefix
            default: "/opt/conda"
            description: Prefix where conda is installed.
            type: str
          - name: conda_user
            default: "root"
            description: User owning the conda installation.
            type: str
        pathToMainFile: playbooks/ecmwf-data-flavour/ecmwf-data-flavour.yml
        pathToRequirementsFile: requirements.yml
      home: https://github.com/ewcloud/ewc-flavours/tree/2.0.0/playbooks/ecmwf-data-flavour
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/EWCLogo.png
      license: https://github.com/ewcloud/ewc-flavours/blob/2.0.0/LICENSE
      maintainers:
        - name: EWC Team
          email: support@europeanweather.cloud
          url: https://github.com/ewcloud/ewc-flavours/issues
      name: "ecmwf-data-flavour"
      published: true
      sources:
        - https://github.com/ewcloud/ewc-flavours.git
      summary: It includes the basic ECMWF software stack, with MARS client and an environment with `ecCodes`, `Metview`, `Earthkit` and `Aviso`.
      version: "2.0.0"
 
    eumetsat-data-tailor-flavour:
      name: "eumetsat-data-tailor-flavour"
      version: "1.4.0"
      ewccli:
        pathToRequirementsFile: playbooks/eumetsat-data-tailor-flavour/requirements.yml
        pathToMainFile: playbooks/eumetsat-data-tailor-flavour/eumetsat-data-tailor-flavour.yml
        inputs:
          - name: data_tailor_env_wipe
            description: flag to delete existing conda environment where data tailor was previously installed. Only yes will be accepted to approve
            type: str
            default: "no"
          - name: data_tailor_env_name
            description: name of conda environment where data tailor will be installed
            type: str
            default: "epct-desktop"
          - name: conda_installer
            description: URI of the installer to use
            type: str
            default: "https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-x86_64.sh"
          - name: conda_update_base
            description: boolean to decide wether base environment needs updating
            type: bool
            default: false
          - name: conda_prefix
            description: prefix where conda will be installed
            type: str
            default: "/opt/conda"
          - name: conda_user
            description: user that will own the conda installation
            type: str
            default: "root"
      description: |
        This Ansible Playbook configures an existing virtual machine running
        within the [European Weather Cloud (EWC)](https://europeanweather.cloud/), to equip it with the Data Tailor Standalone and EUMETSAT Data Access Client (EUMDAC).
        
        ## Functionality
        > üí° Unlike the Data Tailor Web Services (DTWS), which can be used with EUMDAC or via https://tailor.eumetsat.int, the standalone version is generally faster and does not have limitations such as maximum concurrent jobs or workspace size.
        
        The Data Tailor is a product customization toolbox designed to:
        * Enable users to tailor satellite data to their specific needs. 
        * Offers the ability to subset and aggregate data products across space and time, filter layers, generate quick looks, reproject data onto new coordinate reference systems, and reformat data into widely used Geographic Information System (GIS) formats such as netCDF and GeoTIFF, as well as image formats like JPEG and PNG. 
        * Customize data from various satellite collections, including METOP, MFG ,MSG, MTG (Meteosat Third Generation) and Sentinel-3. 
        
        For more information on capabilities of the Data Tailor, please refer to [Data Tailor Standalone Guide on User Portal](https://user.eumetsat.int/resources/user-guides/data-tailor-standalone-guide) and for more information about the available products and customizations inside the Data Tailor, please go to [Products and Customizations Available in the Data Tailor](https://user.eumetsat.int/resources/user-guides/data-store-detailed-guide#ID-Products-and-customisation-available-in-the-Data-Tailor) page.
        
        ## Prerequisites
        
        To successfully run this playbook, the following packages should be available in your work environment:
        
        | Name | Version | License | Home URL |
        |------|---------|----- |-----|
        | git | >= 2.0 | GPLv2  | https://git-scm.com/downloads |
        | python | >= 3.9   | PSF | https://www.python.org/downloads  |
        | ansible | >= 2.15 |  GPLv3+ | https://pypi.org/project/ansible  |
        
        ## Usage
        
        ### 1. Download  Ansible dependencies
        >üí° By default, Ansible Roles are installed under the `~/.ansible/roles` directory within your working environment.
        
        Download the correct version of the Ansible dependencies, if you haven't done so already:
        
        ```
        ansible-galaxy role install -r requirements.yml
        ```
        
        ### 2. Specify the target host and SSH credentials
        Create an inventory file to specify address/credentials that Ansible should use
        to reach the virtual machine you wish to configure:
        
        ```yaml
        # inventory.yml
        ---
        ewcloud:
          hosts:
            data_tailor:
              ansible_python_interpreter: /usr/bin/python3
              ansible_host: <add the IPV4 address of the target host>
              ansible_ssh_private_key_file: <add the path to local SSH private key file>
              ansible_user: <add the default user according to your chosen VM image>
              ansible_ssh_common_args: -o StrictHostKeyChecking=accept-new
        ```
        
        ### 3. Configure and apply the template
        
        #### 3.1. Interactive Mode
        
        By running the following command, you can trigger an interactive session that
        prompts you for the necessary user inputs, and then applies changes to your
        target EWC environment:
        
        ```bash
        ansible-playbook -i inventory.yml eumetsat-data-tailor-flavour.yml
        ```
        
        #### 3.2. Non-Interactive Mode
        
        >üí° To learn more about defining variables at runtime, checkout the
        [official Ansible documentation](https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_variables.html).
        
        You can also run in non-interactive mode by passing the
        `--extra-vars` or `-e` flag, followed by a map of  key-value pairs; one for
        each and every available input (see [inputs section](#inputs) below). For
        example:
        
        ```bash
        ansible-playbook \
          -i inventory.yml \
          -e '{
              "data_tailor_env_wipe": "no",
              "data_tailor_env_name": "epct-desktop",
              "conda_installer": "https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-x86_64.sh",
              "conda_update_base": "false",
              "conda_prefix": "/opt/conda",
              "conda_user": "root"
            }' \
          eumetsat-data-tailor-flavour.yml
        ```
        
        ## Inputs
        
        | Name | Description | Type | Default | Required |
        |------|-------------|------|---------|:--------:|
        | data_tailor_env_wipe | flag to delete existing conda environment where data tailor was previously installed. Only `yes` will be accepted to approve | `string` | `no` | yes |
        | data_tailor_env_name | name of conda environment where data tailor will be installed | `string` | `epct-desktop` | yes |
        | conda_installer  | URI of the installer to use | `string` | `https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-x86_64.sh` | yes |
        | conda_update_base | boolean to decide wether base environment needs updating | `bool` | `false` | yes |
        | conda_prefix | prefix where conda will be installed | `string` | `/opt/conda` | yes |
        | conda_user | user that will own the conda installation | `string` | `root` | yes |
        
        ## Dependencies
        > üí° A VM plan with at least 16GB of RAM is recommended for successful setup and
        stable operation.
        
        | Name | Version | License | Home URL |
        |------|---------|------|------|
        | ewc-ansible-role-conda | 1.1 |  Apache-2.0 | https://github.com/ewcloud/ewc-ansible-role-conda |
        | ewc-ansible-role-data-tailor | 1.0 |  MIT | https://github.com/ewcloud/ewc-ansible-role-data-tailor |

      home: https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning/blob/1.4.0/playbooks/eumetsat-data-tailor-flavour
      sources: 
        - https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning.git
      maintainers:
        - name: EWC Team
          email: support@europeanweather.cloud
          url: https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/EWCLogo.png
      annotations:
        technology: "Ansible Playbook"
        category: "Data Processing"
        supportLevel: "EWC"
        licenseType: "MIT License"
        others: "Deployable,EWCCLI-compatible"
      displayName: EUMETSAT Data Tailor Flavour
      summary: Transforms an existing VM into a powerful satellite data customization hub, enabling users to efficiently subset, aggregate, reproject, and reformat data from METOP, MFG, MSG, MTG, and Sentinel-3 into GIS and image formats, offering faster processing and greater flexibility than web-based alternatives.
      license: https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning/blob/1.4.0/LICENSE
      published: true

    ewccli:
      name: "ewccli"
      version: "0.1.0"
      description: |
        ewccli Python Package is the European Weather Cloud (EWC) Command Line Interface (CLI).
        This tool is developed to support EWC users on the use of the EWC services.

        ## Prerequisites

        - You will need a python environment to run the library implementation of this code. Python version **3.11** or higher.
        - **git** installed on your operating system. (usually is available to most OS nowadays)

        ### Openstack inputs

        You can use the following [link](https://confluence.ecmwf.int/display/EWCLOUDKB/EWC+-+How+to+request+Openstack+Application+Credentials) to obtain:
        - Applications Credentials (ID and secret)

        ## Installing

        We recommend installing **ewccli** inside a **virtual environment** to avoid dependency conflicts with system packages.

        ### Installing with PIP from PyPI

        The EWC CLI Python package is available through [PyPI](https://pypi.org/):

        ```bash
        pip install ewccli
        ```

        ## Getting started

        Once installed, run `ewc` to verify everything works.

      home: https://github.com/ewcloud/ewccli/tree/0.1.0
      sources:
        - https://github.com/ewcloud/ewccli.git
      maintainers:
        - name: EWC
          email: support@europeanweather.cloud
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/EWCLogo.png
      annotations:
        technology: "Python Package"
        category: "Compute"
        supportLevel: "EWC"
        licenseType: "GNU General Public License v3.0"
      displayName: EWC CLI
      summary: European Weather Cloud (EWC) Command Line Interface (CLI) to interact with EWC services.
      license: https://github.com/ewcloud/ewccli/blob/0.1.0/LICENSE
      published: true

    default-stack-provisioning:
      name: "default-stack-provisioning"
      version: "1.4.0"
      description: |
        >‚úÖ This template can be safely applied from any local work environment, even running outside an EWC tenancy's private network.
        
        The default stack provides an integrated environment for secure access and centralized management in the [European Weather Cloud (EWC)](https://europeanweather.cloud/). It orchestrates the deployment of an IPA server for LDAP and DNS functionality, an SSH bastion for access from the public internet, and a remote desktop for graphical interfacing, while ensuring both the bastion and desktop are enrolled as clients to the IPA server to centralize authentication, authorization, and resource discovery.
        
        This configuration template (i.e., an [Ansible Playbook](https://docs.ansible.com/ansible/latest/playbook_guide/playbooks.html)) builds upon the individual templates for [IPA server](https://europeanweather.cloud/community-hub/ipa-server-provisioning), [SSH bastion](https://europeanweather.cloud/community-hub/ssh-bastion-provisioning), [remote desktop](https://europeanweather.cloud/community-hub/remote-desktop-provisioning), and [IPA client](https://europeanweather.cloud/community-hub/ipa-client-enroll-flavour) to automate their deployment and integration.
        
        ![Overview Diagram](https://raw.githubusercontent.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning/refs/heads/main/playbooks/default-stack-provisioning/docs/images/default-stack.png)
        
        ## Functionality
        The template is designed to:
        
        * Provision the IPA server instance via Terraform, including network validation and automatic subnet DNS updates to enable centralized user management and resource discovery across the environment.
        * Provision the SSH bastion instance via Terraform, configured as a secure entrypoint with intrusion prevention.
        * Enroll the newly provisioned SSH bastion as an IPA client, connecting it to the IPA server for centralized credentials and DNS resolution.
        * Provision the remote desktop instance via Terraform, equipped for graphical access over varying bandwidths.
        * Enroll the newly provisioned remote desktop as an IPA client, integrating it with the IPA server for unified access control.
        
        After successful provisioning, you can leverage Terraform's functionality to modify or delete individual components safely. Each will have its own `main.tf` definition and `terraform.tfstate` state file under the corresponding user-defined local directories.
        
        To learn the basics about managing infrastructure with Terraform, check out [Terraform in 100 seconds](https://youtu.be/tomUWcQ0P3k?si=CJwZJ7UaqpynDU-d) on YouTube. You can also find a step-by-step example applied to the EWC on the [official EWC documentation](https://confluence.ecmwf.int/x/2EDOIQ).
        
        >‚ö†Ô∏è Successful execution includes provisioning the IPA server, which updates the DNS nameserver(s) in your OpenStack subnet to point exclusively to the new IPA server. This may impact existing VMs; mitigate by enrolling them as IPA clients or manually updating their DNS configurations as detailed in the IPA server template.
        
        ## Prerequisites
        
        To successfully run this playbook, the following packages should be available in your work environment:
        
        | Name | Version | License | Home URL |
        |------|---------|----- |-----|
        | git | >= 2.0 | GPLv2  | https://git-scm.com/downloads |
        | python | >= 3.9   | PSF | https://www.python.org/downloads  |
        | ansible | >= 2.15 |  GPLv3+ | https://pypi.org/project/ansible  |
        | terraform | >= 0.14  | BSL   | https://developer.hashicorp.com/terraform/install |
        
        ## Usage
        
        ![Template Edition and Running](https://raw.githubusercontent.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning/refs/heads/main/playbooks/default-stack-provisioning/docs/images/item-edit-run.webp)
        
        ### 1. Download  Ansible dependencies
        >üí° By default, Ansible Roles are installed under the `~/.ansible/roles` directory within your working environment.
        
        Download the correct version of the Ansible dependencies, if you haven't done so already:
        
        ```
        ansible-galaxy role install -r requirements.yml
        ```
        
        ### 2. Configure and apply the template
        
        This template can used interactively or non-interactively (i.e. with one single command to configure and also execute).
        Please beware that, regardless of your mode of choice, the complete execution may take several minutes, up to an hour.
        
        #### 2.1. Interactive Mode
        
        By running the following command, you can trigger an interactive session that
        prompts you for the necessary user inputs, and then applies changes to your
        target EWC environment:
        
        ```bash
        ansible-playbook default-stack-provisioning.yml
        ```
        
        #### 2.2. Non-Interactive Mode
        >üí° To learn more about defining variables at runtime, checkout the
        [official Ansible documentation](https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_variables.html).
        
        You can also run in non-interactive mode by passing the
        `--extra-vars` or `-e` flag, followed by a map of  key-value pairs; one for
        each and every available input (see [inputs section](#inputs) below). For example:
        
        ```bash
        ansible-playbook \
          -e '{
                "ewc_provider":"eumetsat",
                "public_keypair_name":"my-public-key-name",
                "private_keypair_path":"~/.ssh/id_rsa",
                "private_network_name":"private",
                "security_group_name":"ipa",
                "ipa_server_tf_project_path":"~/ewc/ipa-server-1",
                "ipa_server_app_name":"ipa",
                "ipa_server_instance_name":"server",
                "ipa_server_instance_index": 1,
                "ipa_server_hostname":"ipa-server-1",
                "ipa_server_flavor_name":"eo1.large",
                "ipa_server_image_name":"Rocky-8.10-20250604144456",
                "ipa_domain":"eumetsat.sandbox.ewc",
                "ipa_admin_username":"ipaadmin",
                "ipa_admin_password":"my-secret-password",
                "ipa_admin_givenname":"IPAADMIN",
                "ipa_admin_surname":"EWC",
                "ssh_bastion_tf_project_path":"~/ewc/ssh-bastion-1",
                "ssh_bastion_app_name":"ssh",
                "ssh_bastion_instance_name":"bastion",
                "ssh_bastion_instance_index": 1,
                "ssh_bastion_flavor_name":"eo1.large",
                "ssh_bastion_image_name":"Rocky-8.10-20250604144456",
                "remote_desktop_tf_project_path":"~/ewc/remote-desktop-1",
                "remote_desktop_app_name":"remote",
                "remote_desktop_instance_name":"desktop",
                "remote_desktop_instance_index": 1,
                "remote_desktop_flavor_name":"eo1.large",
                "remote_desktop_image_name":"Rocky-8.10-20250604144456",
                "remote_desktop_instance_has_fip":"yes",
                "fail2ban_whitelisted_ip_ranges":""
            }' \
            default-stack-provisioning.yml
        ```
        
        ## Inputs
        
        | Name | Description | Type | Default | Required |
        |------|-------------|------|---------|----------|
        | ewc_provider | your target EWC provider. Must match that the provider of your OpenStack application credentials. Valid input values are `ecmwf` or `eumetsat`. | `string` | `eumetsat` | yes |
        | public_keypair_name | name of public keypair (stored in OpenStack) to be copied into the instance for remote SSH access | `string` | n/a | yes |
        | private_keypair_path | path to the local private keypair to use for SSH access to the instance.  | `string` | `~/.ssh/id_rsa` | yes |
        | private_network_name | private network name to attach the instance | `string` | `private` | yes |
        | security_group_name | security group name to apply to the instance | `string` |  `ipa` | yes |
        | ipa_server_tf_project_path | path to terraform working directory  | `string` | `~/ewc/ipa-server-1` | yes |
        | ipa_server_app_name | application name, used as prefix in the full instance name  | `string` | `ipa` | yes |
        | ipa_server_instance_name| name of the instance, used in the full instance name  | `string` | `server` | yes |
        | ipa_server_instance_index | index or identifier for the instance, used as suffix in the full instance name | `number` | `1` | yes |
        | ipa_server_hostname | hostname of the IPA server. Should match the pattern "<ipa_server_app_name>-<ipa_server_instance_name>-<ipa_server_instance_index>". Required for input validation purpose | `string` | `ipa-server-1` | yes |
        | ipa_server_flavor_name | name the flavor to use for the instance. To learn about available options, checkout the [official EWC VM plans documentation](https://confluence.ecmwf.int/display/EWCLOUDKB/EWC+VM+plans). üí° A VM plan with at least 4GB of RAM is recommended for successful setup and stable operation | `string` | `eo1.large` | yes |
        | ipa_server_image_name | name of the image to use for the instance. For complete information on  available options, see the [official EWC Images documentation](https://confluence.ecmwf.int/display/EWCLOUDKB/EWC+Virtual+Images+Available). ‚ö†Ô∏è Only RockyLinux 9.5 and RockyLinux 8.10 VM images are currently supported. This is due to constrains imposed by the required ewc-ansible-role-ipa-server Ansible Role  | `string` | `Rocky-8.10-20250604144456` | yes |
        | ipa_domain | domain name to be managed by the IPA server. Example: `eumetsat.sandbox.ewc` | `string` | n/a | yes |
        | ipa_admin_username | username of administrator account to replace the default IPA admin | `string` | `ipaadmin` | yes |
        | ipa_admin_password | password of administrator account to replace the default IPA admin | `string` | n/a | yes |
        | ipa_admin_givenname | given name of the administrator to replace the default IPA admin (needs not be a physical person) | `string` | `EWC` | yes |
        | ipa_admin_surname | surname of the administrator to replace the default IPA admin (needs not to belong to a physical person) | `string` | `IPAADMIN`  | yes |
        | ssh_bastion_tf_project_path | path to terraform working directory | `string` |  `~/ewc/ssh-bastion-1` | yes |
        | ssh_bastion_app_name | application name, used as prefix in the full instance name  | `string` | `ssh` | yes |
        | ssh_bastion_instance_name| name of the instance, used in the full instance name  | `string` | `bastion` | yes |
        | ssh_bastion_instance_index | index or identifier for the instance, used as suffix in the full instance name | `number` | `1`  | yes |
        | ssh_bastion_flavor_name | name the flavor to use for the instance. To learn about available options, checkout the [official EWC VM plans documentation](https://confluence.ecmwf.int/display/EWCLOUDKB/EWC+VM+plans). üí° A VM plan with at least 4GB of RAM is recommended for successful setup and stable operation | `string` | `eo1.large` | yes |
        | ssh_bastion_image_name | name of the image to use for the instance. For complete information on  available options, see the [official EWC Images documentation](https://confluence.ecmwf.int/display/EWCLOUDKB/EWC+Virtual+Images+Available). ‚ö†Ô∏è Only RockyLinux 9.5 and RockyLinux 8.10 instances are currently supported due to constrains imposed by the required ewc-ansible-role-ssh-bastion Ansible Role | `string` | `Rocky-8.10-20250604144456` | yes |
        | remote_desktop_tf_project_path | path to terraform working directory | `string` | `~/ewc/remote-desktop-1` | yes |
        | remote_desktop_app_name | application name, used as prefix in the full instance name | `string` | `remote`  | yes |
        | remote_desktop_instance_name| name of the instance, used in the full instance name | `string` | `desktop` | yes |
        | remote_desktop_instance_index | index or identifier for the instance, used as suffix in the full instance name | `number` | `1` | yes |
        | remote_desktop_flavor_name | name the flavor to use for the instance. To learn about available options, checkout the [official EWC VM plans documentation](https://confluence.ecmwf.int/display/EWCLOUDKB/EWC+VM+plans). üí° A VM plan with at least 4GB of RAM is recommended for successful setup and stable operation | `string` | `eo1.large` | yes |
        | remote_desktop_image_name | name of the image to use for the instance. For complete information on  available options, see the [official EWC Images documentation](https://confluence.ecmwf.int/display/EWCLOUDKB/EWC+Virtual+Images+Available). ‚ö†Ô∏è Only RockyLinux 8.10 and 9.5 instances are currently supported due to constrains imposed by the required ewc-ansible-role-remote-desktop Ansible Role| `string` | `Rocky-8.10-20250604144456`  | yes |
        | remote_desktop_instance_has_fip | technically required to temporarily assign a floating IP to the instance to securely connect from localhost during initial configuration. üí° The template ensures to remove the floating IP during post-provisioning | `string` | `yes` | yes |
        | fail2ban_whitelisted_ip_ranges | IPv4 ranges (in CIDR format) to be whitelisted in Fail2ban configuration. When in doubt, do not set. Example: `['10.0.0.0/24','192.168.1.0/24']` | `list(string)` | `''` | no |
        
        
        ## Dependencies
        
        | Name | Version | License | Home URL |
        |------|---------|-------|------|
        | ewc-ansible-playbook-ipa-server-provisioning | 1.4 | MIT | https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning |
        | ewc-ansible-playbook-ssh-bastion-provisioning | 1.4 | MIT | https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning |
        | ewc-ansible-playbook-remote-desktop-provisioning | 1.4 | MIT | https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning |
        | ewc-ansible-playbook-ipa-client-enroll-flavour | 1.4 | MIT | https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning |

      home: https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning/blob/1.4.0/playbooks/default-stack-provisioning
      sources:
        - https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning.git
      maintainers:
        - name: EWC Team
          email: support@europeanweather.cloud
          url: https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/EWCLogo.png
      annotations:
        technology: "Ansible Playbook,Terraform Module"
        category: "Remote Access & Desktop,Security,Identity & Access Management,Compute"
        others: "Deployable"
        supportLevel: "EWC"
        licenseType: "MIT License"
      displayName: Default Stack Provisioning
      summary: Automates the creation and state management of three VMs, plus their OS configuration. Each of them serves an specific role (IPA server, SSH bastion or remote desktop). Together, they enable secure access, centralized user management, and a fully graphical development environment within the EWC.
      license: https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning/blob/1.4.0/LICENSE
      published: true

    ipa-client-enroll-flavour:
      name: "ipa-client-enroll-flavour"
      version: "1.4.0"
      ewccli:
        pathToRequirementsFile: playbooks/ipa-client-enroll-flavour/requirements.yml
        pathToMainFile: playbooks/ipa-client-enroll-flavour/ipa-client-enroll-flavour.yml
        inputs:
          - name: ipa_domain
            description: "domain name managed by the IPA server. Example: eumetsat.sandbox.ewc"
            type: str
          - name: ipa_server_hostname
            description: "hostname of the IPA server. Example: ipa-server-1"
            type: str
          - name: ipa_admin_username
            description: "password of the administrator account from the IPA server. Example: my-secret-password"
            type: str
          - name: ipa_admin_password
            description: "username of the administrator account from the IPA server. Example: ipaadmin"
            type: str
          - name: password_allowed_ip_ranges
            description: "IP addresses or IP ranges (in CIDR format) to be allowed for password access in SSHD configuration. When in doubt, add only IP addresses you know and trust. Example: ['10.0.0.0/24','192.168.1.0/24']"
            type: List[str]
            default: ['10.0.0.0/8','172.16.0.0/12','192.168.0.0/16']
      description: |
        This Ansible Playbook configures an existing virtual machine in the
        [European Weather Cloud (EWC)](https://europeanweather.cloud/) to operate as a
        client of [IPA services](../ipa-server-flavour/).
        
        IPA provides integrated identity management and DNS services, enabling
        centralized user authentication, authorization, and resource discovery.
        
        Suitable for tenant admins and tenant users alike, this template simplifies the
        integration of VMs into a [FreeIPA](https://www.freeipa.org/page/Main_Page)-managed
        fleet of instances within the EWC environment. Follow the [instructions below](#usage)
        to enroll your instance.
        
        ## Functionality
        The template is designed to:
        - Configure a pre-existing virtual machine running Rocky Linux 8/9 or Ubuntu to connect to a
        IPA server on the same subnet.
        - Enable DNS resolution for discovering private hosts and public addresses.
        - Allow remote access to the VM using centrally managed LDAP users via password authentication.
        
        ## Prerequisites
        
        To successfully run this playbook, the following packages should be available in your work environment:
        
        | Name | Version | License | Home URL |
        |------|---------|----- |-----|
        | git | >= 2.0 | GPLv2  | https://git-scm.com/downloads |
        | python | >= 3.9   | PSF | https://www.python.org/downloads  |
        | ansible | >= 2.15 |  GPLv3+ | https://pypi.org/project/ansible  |
        
        ## Usage
        
        ### 1. Download  Ansible dependencies
        >üí° By default, Ansible Roles are installed under the `~/.ansible/roles` directory within your working environment.
        
        Download the correct version of the Ansible dependencies, if you haven't done so already:
        
        ```
        ansible-galaxy role install -r requirements.yml
        ```
        
        ### 2. Specify the target host and SSH credentials
        >üí° To find out which is the default user for your chosen VM image,
        checkout the [official EWC documentation](https://confluence.ecmwf.int/display/EWCLOUDKB/EWC+-+VM+images+and+default+users).
        
        Create an inventory file to specify address/credentials that Ansible should use
        to reach the virtual machine you wish to configure:
        
        ```yaml
        # inventory.yml
        ---
        ewcloud:
          hosts:
            ipa_client:
              ansible_python_interpreter: /usr/bin/python3
              ansible_host: <add the IPV4 address of the target host>
              ansible_ssh_private_key_file: <add the path to local SSH private key file>
              ansible_user: <add the default user according to your chosen VM image>
              ansible_ssh_common_args: -o StrictHostKeyChecking=accept-new
        
        ```
        
        ### 3. Configure and apply the template
        
        #### 3.1. Interactive Mode
        
        By running the following command, you can trigger an interactive session that
        prompts you for the necessary user inputs, and then applies changes to your
        target EWC environment:
        
        ```bash
        ansible-playbook -i inventory.yml ipa-client-enroll-flavour.yml
        ```
        
        #### 3.2. Non-Interactive Mode
        
        >üí° To learn more about defining variables at runtime, checkout the
        [official Ansible documentation](https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_variables.html).
        
        You can also run in non-interactive mode by passing the
        `--extra-vars` or `-e` flag, followed by a map of  key-value pairs; one for
        each and every available input (see [inputs section](#inputs) below). For
        example:
        
        ```bash
        ansible-playbook \
          -i inventory.yml \
          -e '{
                "ipa_domain": "eumetsat.sandbox.ewc",
                "ipa_server_hostname": "ipa-server-1",
                "ipa_admin_username": "ipaadmin",
                "ipa_admin_password": "my-secret-password"
            }' \
          ipa-client-enroll-flavour.yml
        ```
        
        ## Inputs
        
        | Name | Description | Type | Default | Required |
        |------|-------------|------|---------|----------|
        | ipa_domain | domain name managed by the IPA server. Example: `eumetsat.sandbox.ewc` | `string` | n/a | yes |
        | ipa_server_hostname | hostname of the IPA server | `string`| `ipa-server-1` | yes |
        | ipa_admin_username | username of the administrator account from the IPA server | `string` | `ipaadmin` | yes |
        | ipa_admin_password | password of the administrator account from the IPA server. Example: `my-secret-password` | `string` | n/a | yes |
        
        ## Dependencies
        > ‚ö†Ô∏è Only Ubuntu 22.04 and RockyLinux 8.10 VM images are currently supported.
        This is due to constrains imposed by the required
        ewc-ansible-role-ipa-client-enroll Ansible Role.
        
        | Name | Version | License |Home URL |
        |------|---------|------|-----|
        | ewc-ansible-role-ipa-client-enroll | 1.1 | MIT | https://github.com/ewcloud/ewc-ansible-role-ipa-client-enroll |

      home: https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning/blob/1.4.0/playbooks/ipa-client-enroll-flavour
      sources:
        - https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning.git
      maintainers:
        - name: EWC Team
          email: support@europeanweather.cloud
          url: https://github.com/ewcloud/ewc-flavours/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/EWC%20-%20Emblem%20color.png
      annotations:
        technology: "Ansible Playbook"
        category: "Security,Identity & Access Management"
        others: "Deployable,EWCCLI-compatible"
        supportLevel: "EWC"
        licenseType: "MIT License"
      displayName: IPA Client Enroll Flavour
      summary: Seamlessly integrates a running VM into a FreeIPA-managed fleet of instances, enabling centralized user authentication, DNS resolution, and secure remote access for simplified and scalable identity management.
      license: https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning/blob/1.4.0/LICENSE
      published: true

    ipa-client-disenroll-flavour:
      name: "ipa-client-disenroll-flavour"
      version: "1.4.0"
      ewccli:
        pathToMainFile: playbooks/ipa-client-disenroll-flavour/ipa-client-disenroll-flavour.yml
        pathToRequirementsFile: playbooks/ipa-client-disenroll-flavour/requirements.yml
        inputs:
          - name: ipa_domain
            description: "domain name managed by the IPA server. Example: eumetsat.sandbox.ewc"
            type: str
          - name: ipa_client_hostname
            description: "hostname of the target vm to be disenrolled from the IPA server. Example: ipa-client-1"
            type: str
          - name: ipa_server_hostname
            description: "hostname of the IPA server. Example: ipa-server-1"
            type: str
          - name: ipa_admin_username
            description: "username of the administrator account from the IPA server. Example: ipaadmin"
            type: str
          - name: ipa_admin_password
            description: "password of the administrator account from the IPA server. Example: my-secret-password"
            type: str
      description: |
        This Ansible Playbook configures an existing virtual machine in the
        [European Weather Cloud (EWC)](https://europeanweather.cloud/) to disenroll
        from a [IPA server](../ipa-server-flavour/).
        
        IPA provides integrated identity management and DNS services for centralized
        user authentication, authorization, and resource discovery. This template safely
        removes a VM from a [FreeIPA](https://www.freeipa.org/page/Main_Page)-managed
        environment, which is essential when decommissioning infrastructure to prevent
        stale entries in the IPA directory‚Äîsuch as obsolete host records, and DNS
        pointers‚Äîthat could lead to management overhead, naming conflicts or security
        vulnerabilities from lingering credentials.
        
        Suitable for both tenant admin and tenant users, this template streamlines client
        removal, ensuring a clean and efficient identity system. The end benefit for
        users is reduced administrative burden, improved security posture,
        and easier scaling or redeployment of resources. Follow the [instructions below](#usage)
        to disenroll your instance.
        
        ## Functionality
        The template is designed to:
        - Configure a pre-existing virtual machine, previously enrolled (likely with help of the [IPA client](../ipa-client-enroll-flavour/) template) to disconnect from an [IPA server](../ipa-server-flavour/).
        - Disable user authentication and authorization (LDAP) for the target instance.
        - Remove IPA server-internal DNS records referencing the target instance, if present.
        
        ## Prerequisites
        
        To successfully run this playbook, the following packages should be available in your work environment:
        
        | Name | Version | License | Home URL |
        |------|---------|----- |-----|
        | git | >= 2.0 | GPLv2  | https://git-scm.com/downloads |
        | python | >= 3.9   | PSF | https://www.python.org/downloads  |
        | ansible | >= 2.15 |  GPLv3+ | https://pypi.org/project/ansible  |
        
        ## Usage
        
        ### 1. Download  Ansible dependencies
        >üí° By default, Ansible Roles are installed under the `~/.ansible/roles` directory within your working environment.
        
        Download the correct version of the Ansible dependencies, if you haven't done so already:
        
        ```
        ansible-galaxy role install -r requirements.yml
        ```
        
        ### 2. Specify the target host and SSH credentials
        >üí° To find out which is the default user for your chosen VM image,
        checkout the [official EWC documentation](https://confluence.ecmwf.int/display/EWCLOUDKB/EWC+-+VM+images+and+default+users).
        
        Create an inventory file to specify address/credentials that Ansible should use
        to reach the virtual machine you wish to configure:
        
        ```yaml
        # inventory.yml
        ---
        ewcloud:
          hosts:
            ipa_client:
              ansible_python_interpreter: /usr/bin/python3
              ansible_host: <add the IPV4 address of the target host>
              ansible_ssh_private_key_file: <add the path to local SSH private key file>
              ansible_user: <add the default user according to your chosen VM image>
              ansible_ssh_common_args: -o StrictHostKeyChecking=accept-new
        
        ```
        
        ### 3. Configure and apply the template
        
        #### 3.1. Interactive Mode
        
        By running the following command, you can trigger an interactive session that
        prompts you for the necessary user inputs, and then applies changes to your
        target EWC environment:
        
        ```bash
        ansible-playbook -i inventory.yml ipa-client-disenroll-flavour.yml
        ```
        
        #### 3.2. Non-Interactive Mode
        
        >üí° To learn more about defining variables at runtime, checkout the
        [official Ansible documentation](https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_variables.html).
        
        You can also run in non-interactive mode by passing the
        `--extra-vars` or `-e` flag, followed by a map of  key-value pairs; one for
        each and every available input (see [inputs section](#inputs) below). For
        example:
        
        ```bash
        ansible-playbook \
          -i inventory.yml \
          -e '{
              "ipa_domain": "eumetsat.sandbox.ewc",
              "ipa_client_hostname": "ipa-client-1",
              "ipa_server_hostname": "ipa-server-1",
              "ipa_admin_username": "ipaadmin",
              "ipa_admin_password": "my-secret-password"
            }' \
          ipa-client-disenroll-flavour.yml
        ```
        
        ## Inputs
        
        | Name | Description | Type | Default | Required |
        |------|-------------|------|---------|----------|
        | ipa_domain | domain name managed by the IPA server. Example: `eumetsat.sandbox.ewc` | `string` | n/a | yes |
        | ipa_client_hostname | hostname of the target vm to be disenrolled from the IPA server. Example: `ipa-client-1` | `string` | n/a | yes |
        | ipa_server_hostname | hostname of the IPA server | `string` | `ipa-server-1` | yes |
        | ipa_admin_username | username of the administrator account from the IPA server | `string` | `ipaadmin` | yes |
        | ipa_admin_password | password of the administrator account from the IPA server. Example: `my-secret-password` | `string` | n/a | yes |
        
        
        ## Dependencies
        
        | Name | Version | License | Home URL |
        |------|---------|------|----------|
        | ewc-ansible-role-ipa-client-disenroll | 1.0 | MIT |  https://github.com/ewcloud/ewc-ansible-role-ipa-client-disenroll |

      home: https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning/blob/1.4.0/playbooks/ipa-client-disenroll-flavour
      sources:
        - https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning.git
      maintainers:
        - name: EWC Team
          email: support@europeanweather.cloud
          url: https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/EWC%20-%20Emblem%20color.png
      annotations:
        technology: "Ansible Playbook"
        category: "Security,Identity & Access Management"
        others: "Deployable,EWCCLI-compatible"
        supportLevel: "EWC"
        licenseType: "MIT License"
      displayName: IPA Client Disenroll Flavour
      summary: Simplifies the secure removal of a running VM from a FreeIPA-managed fleet of instances, reducing administrative overhead and enhancing security by eliminating stale credentials and DNS records. 
      license: https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning/blob/1.4.0/LICENSE
      published: true

    ipa-client-provisioning:
      name: "ipa-client-provisioning"
      version: "1.4.0"
      description: |
        >‚úÖ This template can be applied from any local work environment, even running outside an EWC tenancy's private network.
        
        This is a configuration template
        (i.e. an [Ansible Playbook](https://docs.ansible.com/ansible/latest/playbook_guide/playbooks.html))
        to customize your environment in the
        [European Weather Cloud (EWC)](https://europeanweather.cloud/).
        
        The template is designed to:
        
        * Provision an instance via [Terraform](https://developer.hashicorp.com/terraform),
        with your specified Linux distribution and desired flavor (a.k.a VM plan):
          * If a `terraform.tfstate` [state file](https://developer.hashicorp.com/terraform/language/state)
          is not found under the user-defined directory, attempts to create the
          instance from scratch
        
          OR
          * if  `terraform.tfstate` file is found, leverages Terraform's out-of-the-box
          functionality to update the instance referenced on it
        * Configure the existing or newly provisioned instance to connect to an IPA
        server running on the same subnet, such that it:
          * Is remotely accessible via public key or password to centrally
            managed LDAP users
          * Is able to leverage DNS resolution and discover other private
            hosts or public addresses
        
        After successful provisioning, you can leverage Terraform's functionality to modify or delete individual components safely. Each will have its own `main.tf` definition and `terraform.tfstate` state file under the corresponding user-defined local directories.
        
        To learn the basics about managing infrastructure with Terraform, check out [Terraform in 100 seconds](https://youtu.be/tomUWcQ0P3k?si=CJwZJ7UaqpynDU-d) on YouTube. You can also find a step-by-step example applied to the EWC on the [official EWC documentation](https://confluence.ecmwf.int/x/2EDOIQ).
        
        ## Authentication
        
        Before proceeding, if you lack OpenStack Application Credentials or do not know
        how to make them available to Ansible in your development environment, make sure
        to check out [this page](https://confluence.ecmwf.int/display/EWCLOUDKB/EWC+-+How+to+request+Openstack+Application+Credentials)
        and [this page](https://confluence.ecmwf.int/display/EWCLOUDKB/EWC+-+OpenStack+Command-Line+client#EWCOpenStackCommandLineclient-GettingStarted)
        from EWC documentation.
        
        Additionally, in order to configure the virtual machine after provisioning, you
        required a private and public SSH keypair. Checkout this
        [EWC documentation page](https://confluence.ecmwf.int/display/EWCLOUDKB/EWC+-+OpenStack+Command-Line+client#EWCOpenStackCommandLineclient-ImportSSHkey)
        for details on how import your public key into OpenStack.
        
        ## Prerequisites
        
        To successfully run this playbook, the following packages should be available in your work environment:
        
        | Name | Version | License | Home URL |
        |------|---------|----- |-----|
        | git | >= 2.0 | GPLv2  | https://git-scm.com/downloads |
        | python | >= 3.9   | PSF | https://www.python.org/downloads  |
        | ansible | >= 2.15 |  GPLv3+ | https://pypi.org/project/ansible  |
        | terraform | >= 0.14  | BSL   | https://developer.hashicorp.com/terraform/install |
        
        ## Usage
        
        ### 1. Download  Ansible dependencies
        >üí° By default, Ansible Roles are installed under the `~/.ansible/roles` directory within your working environment.
        
        Download the correct version of the Ansible dependencies, if you haven't done so already:
        
        ```
        ansible-galaxy role install -r requirements.yml
        ```
        
        ### 2. Configure and apply the template
        
        #### 2.1. Interactive Mode
        
        By running the following command, you can trigger an interactive session that
        prompts you for the necessary user inputs, and then applies changes to your
        target EWC environment:
        
        ```bash
        ansible-playbook ipa-client-provisioning.yml
        ```
        
        #### 2.2. Non-Interactive Mode
        
        >üí° To learn more about defining variables at runtime, checkout the
        [official Ansible documentation](https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_variables.html).
        
        You can also run in non-interactive mode by passing the
        `--extra-vars` or `-e` flag, followed by a map of  key-value pairs; one for
        each and every available input (see [inputs section](#inputs) below). For example:
        
        ```bash
        ansible-playbook \
          -e '{
                "ewc_provider": "eumetsat",
                "tf_project_path": "~/ewc/ipa-client-1",
                "app_name": "ipa",
                "instance_name": "client",
                "instance_index": 1,
                "flavor_name": "eo2.medium",
                "image_name": "ubuntu-22.04-20250204105649",
                "public_keypair_name": "my-public-key-name",
                "private_keypair_path": "~/.ssh/id_rsa",
                "private_network_name": "private",
                "security_group_name": "ipa",
                "instance_has_fip": "no",
                "ipa_domain": "eumetsat.sandbox.ewc",
                "ipa_server_hostname": "ipa-server-1",
                "ipa_admin_username": "ipaadmin",
                "ipa_admin_password": "my-secret-password"
            }' \
          ipa-client-provisioning.yml
        ```
        ## Inputs
        
        | Name | Description | Type | Default | Required |
        |------|-------------|------|---------|----------|
        | ewc_provider | your target EWC provider. Must match that the provider of your OpenStack application credentials. Valid input values are `ecmwf` or `eumetsat`. | `string` | `eumetsat` | yes |
        | tf_project_path | path to terraform working directory  | `string` | `~/ewc/ipa-client-1` | yes |
        | app_name | application name, used as prefix in the full instance name | `string` | `ipa` | yes |
        | instance_name| name of the instance, used in the full instance name | `string` |  `client` | yes |
        | instance_index | index or identifier for the instance, used as suffix in the full instance name | `number` | `1` | yes |
        | flavor_name | name the flavor to use for the instance. To learn about available options, checkout the [official EWC VM plans documentation](https://confluence.ecmwf.int/display/EWCLOUDKB/EWC+VM+plans) | `string` | `eo1.large` | yes |
        | image_name | name of the image to use for the instance. For complete information on  available options, see the [official EWC Images documentation](https://confluence.ecmwf.int/display/EWCLOUDKB/EWC+Virtual+Images+Available).‚ö†Ô∏è Only Ubuntu 22.04 and RockyLinux 8.10 VM images are currently supported. This is due to constrains imposed by the required ewc-ansible-role-ipa-client-enroll Ansible Role | `string` | `ubuntu-22.04-20250204105649` | yes |
        | public_keypair_name | name of public keypair (stored in OpenStack) to be copied into the instance for remote SSH access | `string` | n/a | yes |
        | private_keypair_path | path to the local private keypair to use for SSH access to the instance  | `string` | `~/.ssh/id_rsa` | yes |
        | private_network_name | private network name to attach the instance to  | `string` | `private`| yes |
        | security_group_name | security group name to apply to the instance  | `string` | `ipa` | yes |
        | instance_has_fip | whether to assign a floating IP to the instance. Only `yes` will be accepted to approve | `string` | n/a | yes |
        | ipa_domain | domain name managed by the IPA server. Example: `eumetsat.sandbox.ewc` | `string` | n/a | yes |
        | ipa_server_hostname | hostname of the IPA server | `string`|  `ipa-server-1` | yes |
        | ipa_admin_username | username of the administrator account from the IPA server | `string` | `ipaadmin` | yes |
        | ipa_admin_password | password of the administrator account from the IPA server | `string` | n/a | yes |
        
        ## Dependencies
        > ‚ö†Ô∏è Only Ubuntu 22.04 and RockyLinux 8.10 VM images are currently supported.
        This is due to constrains imposed by the required
        ewc-ansible-role-ipa-client-enroll Ansible Role.
        
        | Name | Version | License | Home URL |
        |------|---------|-------|------|
        | ewc-tf-module-openstack-compute | 1.4 | MIT | https://github.com/ewcloud/ewc-tf-module-openstack-compute  |
        | ewc-ansible-role-ipa-client-enroll | 1.1 | MIT | https://github.com/ewcloud/ewc-ansible-role-ipa-client-enroll |

      home: https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning/blob/1.4.0/playbooks/ipa-client-provisioning
      sources:
        - https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning.git
      maintainers:
        - name: EWC Team
          email: support@europeanweather.cloud
          url: https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/EWCLogo.png
      annotations:
        technology: "Ansible Playbook,Terraform Module"
        category: "Security,Identity & Access Management,Compute"
        others: "Deployable"
        supportLevel: "EWC"
        licenseType: "MIT License"
      displayName: IPA Client Provisioning
      summary: Automates the creation or state update of a VM, plus its configuration as an IPA client, effectively enabling integration with a fleet of instances with centralized authentication, secure remote access, and DNS-based resource discovery in the EWC.
      license: https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning/blob/1.4.0/LICENSE
      published: true

    ipa-client-teardown:
      name: "ipa-client-teardown"
      version: "1.4.0"
      description: |
        >‚úÖ This template can be safely applied from any local work environment, even running outside an EWC tenancy's private network.
        
        This is a configuration template
        (i.e. an [Ansible Playbook](https://docs.ansible.com/ansible/latest/playbook_guide/playbooks.html))
        to customize your environment in the
        [European Weather Cloud (EWC)](https://europeanweather.cloud/).
        
        The template is designed to run on an existing virtual machine, running an
        [IPA client](https://www.freeipa.org/page/Client) previously enrolled in
        your IPA server, such that it:
        
        * Checks if a `terraform.tfstate`[state file](https://developer.hashicorp.com/terraform/language/state)
          for the target instance is available under the user-defined directory
        * Requests configuration changes to said IPA server for:
          * Stopping user authentication/authorization management (LDAP) to target
          instance
          * Deletion of IPA server-internal DNS records referencing  the target
          instance machine, if and when found
        * Teardown the target instance and any attached volumes or IP addresses.
        
        After successful provisioning, you can leverage Terraform's functionality to modify or delete individual components safely. Each will have its own `main.tf` definition and `terraform.tfstate` state file under the corresponding user-defined local directories.
        
        To learn the basics about managing infrastructure with Terraform, check out [Terraform in 100 seconds](https://youtu.be/tomUWcQ0P3k?si=CJwZJ7UaqpynDU-d) on YouTube. You can also find a step-by-step example applied to the EWC on the [official EWC documentation](https://confluence.ecmwf.int/x/2EDOIQ).
        
        ## Prerequisites
        
        To successfully run this playbook, the following packages should be available in your work environment:
        
        | Name | Version | License | Home URL |
        |------|---------|----- |-----|
        | git | >= 2.0 | GPLv2  | https://git-scm.com/downloads |
        | python | >= 3.9   | PSF | https://www.python.org/downloads  |
        | ansible | >= 2.15 |  GPLv3+ | https://pypi.org/project/ansible  |
        | terraform | >= 0.14  | BSL   | https://developer.hashicorp.com/terraform/install |
        
        ## Usage
        
        ### 1. Download  Ansible dependencies
        >üí° By default, Ansible Roles are installed under the `~/.ansible/roles` directory within your working environment.
        
        Download the correct version of the Ansible dependencies, if you haven't done so already:
        
        ```
        ansible-galaxy role install -r requirements.yml
        ```
        
        ### 2. Configure and apply the template
        
        #### 2.1. Interactive Mode
        
        By running the following command, you can trigger an interactive session that
        prompts you for the necessary user inputs, and then applies changes to your
        target EWC environment:
        
        ```bash
        ansible-playbook ipa-client-teardown.yml
        ```
        
        #### 2.2. Non-Interactive Mode
        >üí° To learn more about defining variables at runtime, checkout the
        [official Ansible documentation](https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_variables.html).
        
        You can also run in non-interactive mode by passing the
        `--extra-vars` or `-e` flag, followed by a map of  key-value pairs; one for
        each and every available input (see [inputs section](#inputs) below). For example:
        
        ```bash
        ansible-playbook \
          -e '{
                "tf_project_path": "~/ewc/ipa-client-1",
                "private_keypair_path": "~/.ssh/id_rsa",
                "ipa_domain": "eumetsat.sandbox.ewc",
                "ipa_server_hostname": "ipa-server-1",
                "ipa_admin_username": "ipaadmin",
                "ipa_admin_password": "my-secret-password"
            }' \
          ipa-client-teardown.yml
        ```
        ## Inputs
        
        | Name | Description | Type | Default | Required |
        |------|-------------|------|---------|----------|
        | tf_project_path | path to terraform working directory. Example: `~/ewc/ipa-client-1` | `string` | n/a | yes |
        | private_keypair_path | path to the local private keypair to use for SSH access to the instance | `string` | `~/.ssh/id_rsa` | yes |
        | ipa_domain | domain name managed by the IPA server. Example: `eumetsat.sandbox.ewc` | `string` | n/a | yes |
        | ipa_server_hostname | hostname of the IPA server. | `string`| `ipa-server-1` | yes |
        | ipa_admin_username | username of the administrator account from the IPA server | `string` | `ipaadmin` | yes |
        | ipa_admin_password | password of the administrator account from the IPA server | `string` | n/a | yes |
        

        ## Dependencies
        
        | Name | Version | License | Home URL |
        |------|---------|-------|-----|
        | ewc-tf-module-openstack-compute | 1.4 | MIT | https://github.com/ewcloud/ewc-tf-module-openstack-compute  |
        | ewc-ansible-role-ipa-client-disenroll | 1.0 | MIT |  https://github.com/ewcloud/ewc-ansible-role-ipa-client-disenroll |

      home: https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning/blob/1.4.0/playbooks/ipa-client-teardown
      sources:
        - https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning.git
      maintainers:
        - name: EWC Team
          email: support@europeanweather.cloud
          url: https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/EWCLogo.png
      annotations:
        technology: "Ansible Playbook,Terraform Module"
        category: "Security,Identity & Access Management,Compute"
        others: "Deployable"
        supportLevel: "EWC"
        licenseType: "MIT License"
      displayName: IPA Client Teardown
      summary: Simplifies the secure teardown of an IPA client VM in the EWC, disabling LDAP authentication, removing DNS records, and safely decommissioning the instance and its resources.
      license: https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning/blob/1.4.0/LICENSE
      published: true

    ipa-server-flavour:
      name: "ipa-server-flavour"
      version: "1.4.0"
      ewccli:
        defaultImageName: Rocky-9.5-20250604142417
        pathToRequirementsFile: playbooks/ipa-server-flavour/requirements.yml
        pathToMainFile: playbooks/ipa-server-flavour/ipa-server-flavour.yml
        inputs:
          - name: ipa_domain
            description: "domain name to be managed by the IPA server. Example: eumetsat.sandbox.ewc"
            type: str
          - name: ipa_server_hostname
            description: "hostname of the target vm where the IPA server will be installed. Example: ipa-server-1"
            type: str
          - name: ipa_admin_username
            description: "username of administrator account to replace the default IPA admin. Example: ipaadmin"
            type: str
          - name: ipa_admin_password
            description: "password of administrator account to replace the default IPA admin. Example: my-secret-password"
            type: str
          - name: ipa_admin_givenname
            description: " 	given name of the administrator to replace the default IPA admin (not necessarily a real person's name). Example: EWC"
            type: str
          - name: ipa_admin_surname
            description: "surname of the administrator to replace the default IPA admin (not necessarily a real person's name). Example: IPAADMIN"
            type: str
          - name: os_network_name
            description: "OpenStack network to which the target virtual machine has access. Example: private"
            type: str
          - name: os_security_group_name
            description: "OpenStack security group containing all firewall rules required by the IPA server/client communication. Example: ipa"
            type: str
        defaultSecurityGroups:
          - ipa
      description: |
        This Ansible Playbook configures an existing virtual machine running
        within the [European Weather Cloud (EWC)](https://europeanweather.cloud/)
        to operate as a [FreeIPA](https://www.freeipa.org/page/Main_Page) server.
        
        IPA (acronym for identity, policy and audit), provides integrated identity
        management and DNS services, enabling centralized user authentication, authorization,
        and resource discovery.
        
        Ideal for tenant administrators, this template simplifies the setup
        of a secure, open-source identity and DNS solution in the EWC environment. Follow the
        [instructions below](#usage) to configure your server.
        
        ## Functionality
        The template is designed to:
        * Validate that network/subnet configuration in the EWC tenancy
        * Configure a pre-existing virtual machine running RockyLinux version 8 or 9,
        and with a minimum recommended 4GB of RAM, such that it:
          * Provides DNS resolutions for discovery of resources (i.e. other virtual
          machines)
          * Enables centralized user and credentials creation/edition/deletion/authentication
          * Allows centralized authorization between users and resources
        * Automatically update the underlying subnet DNS nameserver to point to the
        newly configured IPA server
        
        >‚ö†Ô∏è Successful execution leads to changes of the DNS nameserver(s) in your
        OpenStack subnet (includes now only the IP address of the new IPA server).
        This can negatively affect existing VMs within your subnet.
        To prevent issues, programmatically update each VM via the
        [IPA Client Enroll Flavour](https://europeanweather.cloud/community-hub/ipa-client-enroll-flavour)
        CommunityHub Item. Alternatively, you can manually
        [add the new nameserver](https://docs.redhat.com/en/documentation/red_hat_enterprise_linux/6/html/identity_management_guide/domain-dns)
        to their DNS configuration.
        
        ## Prerequisites
        
        To successfully run this playbook, the following packages should be available in your work environment:
        
        | Name | Version | License | Home URL |
        |------|---------|----- |-----|
        | git | >= 2.0 | GPLv2  | https://git-scm.com/downloads |
        | python | >= 3.9   | PSF | https://www.python.org/downloads  |
        | ansible | >= 2.15 |  GPLv3+ | https://pypi.org/project/ansible  |
        
        ## Usage
        
        ### 1. Download  Ansible dependencies
        >üí° By default, Ansible Roles are installed under the `~/.ansible/roles` directory within your working environment.
        
        Download the correct version of the Ansible dependencies, if you haven't done so already:
        
        ```
        ansible-galaxy role install -r requirements.yml
        ```
        
        ### 2. Specify the target host and SSH credentials
        Create an inventory file to specify address/credentials that Ansible should use
        to reach the virtual machine you wish to configure:
        
        ```yaml
        # inventory.yml
        ---
        ewcloud:
          hosts:
            ipa_server:
              ansible_python_interpreter: /usr/bin/python3
              ansible_host: <add the IPV4 address of the target host>
              ansible_ssh_private_key_file: <add the path to local SSH private key file>
              ansible_user: cloud-user
              ansible_ssh_common_args: -o StrictHostKeyChecking=accept-new
        ```
        
        ### 3. Configure and apply the template
        
        #### 3.1. Interactive Mode
        
        By running the following command, you can trigger an interactive session that
        prompts you for the necessary user inputs, and then applies changes to your
        target EWC environment:
        
        ```bash
        ansible-playbook -i inventory.yml ipa-server-flavour.yml
        ```
        
        #### 3.2. Non-Interactive Mode
        
        >üí° To learn more about defining variables at runtime, checkout the
        [official Ansible documentation](https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_variables.html).
        
        You can also run in non-interactive mode by passing the
        `--extra-vars` or `-e` flag, followed by a map of  key-value pairs; one for
        each and every available input (see [inputs section](#inputs) below). For
        example:
        
        ```bash
        ansible-playbook \
          -i inventory.yml \
          -e '{
              "ipa_domain": "eumetsat.sandbox.ewc",
              "ipa_server_hostname": "ipa-server-1",
              "ipa_admin_username": "ipaadmin",
              "ipa_admin_password": "my-secret-password",
              "ipa_admin_givenname": "EWC",
              "ipa_admin_surname": "IPAADMIN",
              "os_network_name": "private",
              "os_security_group_name": "ipa"
            }' \
          ipa-server-flavour.yml
        ```
        
        ## Inputs
        
        | Name | Description | Type | Default | Required |
        |------|-------------|------|---------|----------|
        | ipa_domain | domain name to be managed by the IPA server. Example: `eumetsat.sandbox.ewc` | `string` | n/a | yes |
        | ipa_server_hostname | hostname of the target vm where the IPA server will be installed | `string`| `ipa-server-1` | yes |
        | ipa_admin_username | username of administrator account to replace the default IPA admin | `string` | `ipaadmin` | yes |
        | ipa_admin_password | password of administrator account to replace the default IPA admin. Example: `my-secret-password` | `string` | n/a | yes |
        | ipa_admin_givenname | given name of the administrator to replace the default IPA admin (not necessarily a real person's name) | `string` | `EWC` | yes |
        | ipa_admin_surname | surname of the administrator to replace the default IPA admin (not necessarily a real person's name) | `string` | `IPAADMIN` | yes |
        | os_network_name | OpenStack network to which the target virtual machine has access to | `string` | `private` | yes |
        | os_security_group_name | OpenStack security group containing all firewall rules required by the IPA server/client communication | `string` | `ipa` | yes |
        
        ## Dependencies
        > ‚ö†Ô∏è Only RockyLinux 9.5 and RockyLinux 8.10 VM images are currently supported.
        This is due to constrains imposed by the required ewc-ansible-role-ipa-server
        Ansible Role.
        
        > üí° A VM plan with at least 4GB of RAM is recommended for successful setup and
        stable operation.
        
        | Name | Version | License | Home URL |
        |------|---------|------|------|
        | ewc-ansible-role-ipa-server | 1.0 |  MIT | https://github.com/ewcloud/ewc-ansible-role-ipa-server |

      home: https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning/blob/1.4.0/playbooks/ipa-server-flavour
      sources:
        - https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning.git
      maintainers:
        - name: EWC Team
          email: support@europeanweather.cloud
          url: https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/EWCLogo.png
      annotations:
        technology: "Ansible Playbook"
        category: "Security,Identity & Access Management"
        others: "Deployable,EWCCLI-compatible"
        supportLevel: "EWC"
        licenseType: "MIT License"
      displayName: IPA Server Flavour
      summary: Turns an existing VM into a FreeIPA server, a central place for user authentication, authorization, and DNS-based resource discovery for secure and efficient identity management.
      license: https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning/blob/1.4.0/LICENSE
      published: true

    ipa-server-provisioning:
      name: "ipa-server-provisioning"
      version: "1.4.0"
      description: |
        >‚úÖ This template can be safely applied from any local work environment, even running outside an EWC tenancy's private network.
        
        IPA (acronym for identity, policy and audit) and its open-source
        implementation [FreeIPA](https://www.freeipa.org/page/Main_Page), serve
        both as a user management system and as your internal DNS nameserver.
        
        This is a configuration template
        (i.e. an [Ansible Playbook](https://docs.ansible.com/ansible/latest/playbook_guide/playbooks.html))
        to customize your environment in the
        [European Weather Cloud (EWC)](https://europeanweather.cloud/).
        
        The template is designed to:
        
        * Provision an instance via [Terraform](https://developer.hashicorp.com/terraform),
        with your specified VM image and desired flavor (a.k.a VM plan):
          * If a `terraform.tfstate` [state file](https://developer.hashicorp.com/terraform/language/state)
          is not found under the user-defined directory, attempts to create the
          instance from scratch
        
          OR
          * if a `terraform.tfstate` file is found, leverages Terraform's out-of-the-box
          functionality to update the instance referenced on it
        * Validate that network/subnet configuration in the EWC tenancy
        * Configure the existing or newly provisioned instance such that it:
          * Provides DNS resolutions for discovery of resources (i.e. other virtual machines)
          * Enables centralized user and credentials creation/edition/deletion/authentication
          * Allows centralized authorization between users and resources
        * Automatically update the underlying subnet DNS nameserver to point to the
        newly configured IPA server
        
        After successful provisioning, you can leverage Terraform's functionality to modify or delete individual components safely. Each will have its own `main.tf` definition and `terraform.tfstate` state file under the corresponding user-defined local directories.
        
        To learn the basics about managing infrastructure with Terraform, check out [Terraform in 100 seconds](https://youtu.be/tomUWcQ0P3k?si=CJwZJ7UaqpynDU-d) on YouTube. You can also find a step-by-step example applied to the EWC on the [official EWC documentation](https://confluence.ecmwf.int/x/2EDOIQ).
        
        >‚ö†Ô∏è Successful execution leads to changes of the DNS nameserver(s) in your
        OpenStack subnet (includes now only the IP address of the new IPA server).
        This can negatively affect existing VMs within your subnet.
        To prevent issues, programmatically update each VM via the
        [IPA Client Enroll Flavour](https://europeanweather.cloud/community-hub/ipa-client-enroll-flavour)
        CommunityHub Item. Alternatively, you can manually
        [add the new nameserver](https://docs.redhat.com/en/documentation/red_hat_enterprise_linux/6/html/identity_management_guide/domain-dns)
        to their DNS configuration.
        
        >üí° This template can be deployed in combination with complementary infrastructure as part of the [Default Stack Provisioning](https://europeanweather.cloud/community-hub/default-stack-provisioning) Community Hub Item.
        
        ## Prerequisites
        
        To successfully run this playbook, the following packages should be available in your work environment:
        
        | Name | Version | License | Home URL |
        |------|---------|----- |-----|
        | git | >= 2.0 | GPLv2  | https://git-scm.com/downloads |
        | python | >= 3.9   | PSF | https://www.python.org/downloads  |
        | ansible | >= 2.15 |  GPLv3+ | https://pypi.org/project/ansible  |
        | terraform | >= 0.14  | BSL   | https://developer.hashicorp.com/terraform/install |
        
        ## Usage
        
        ### 1. Download  Ansible dependencies
        >üí° By default, Ansible Roles are installed under the `~/.ansible/roles` directory within your working environment.
        
        Download the correct version of the Ansible dependencies, if you haven't done so already:
        
        ```
        ansible-galaxy role install -r requirements.yml
        ```
        
        ### 2. Configure and apply the template
        
        #### 2.1. Interactive Mode
        
        By running the following command, you can trigger an interactive session that
        prompts you for the necessary user inputs, and then applies changes to your
        target EWC environment:
        
        ```bash
        ansible-playbook ipa-server-provisioning.yml
        ```
        
        #### 2.2. Non-Interactive Mode
        >üí° To learn more about defining variables at runtime, checkout the
        [official Ansible documentation](https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_variables.html).
        
        You can also run in non-interactive mode by passing the
        `--extra-vars` or `-e` flag, followed by a map of  key-value pairs; one for
        each and every available input (see [inputs section](#inputs) below). For example:
        
        ```bash
        ansible-playbook \
          -e '{
                "ewc_provider": "eumetsat",
                "ipa_server_tf_project_path":"~/ewc/ipa-server-1",
                "ipa_server_app_name":"ipa",
                "ipa_server_instance_name":"server",
                "ipa_server_instance_index": 1,
                "ipa_server_flavor_name":"eo1.large",
                "ipa_server_image_name":"Rocky-8.10-20250604144456",
                "public_keypair_name":"my-public-key-name",
                "private_keypair_path":"~/.ssh/id_rsa",
                "private_network_name": "private",
                "security_group_name": "ipa",
                "ipa_domain":"eumetsat.sandbox.ewc",
                "ipa_admin_username":"ipaadmin",
                "ipa_admin_password":"my-secret-password",
                "ipa_admin_givenname": "IPAADMIN",
                "ipa_admin_surname": "EWC"
            }' \
          ipa-server-provisioning.yml
        ```
        ## Inputs
        
        | Name | Description | Type | Default | Required |
        |------|-------------|------|---------|----------|
        | ewc_provider | your target EWC provider. Must match that the provider of your OpenStack application credentials. Valid input values are `ecmwf` or `eumetsat`. | `string` | `eumetsat` | yes |
        | ipa_server_tf_project_path | path to terraform working directory | `string` | `~/ewc/ipa-server-1` | yes |
        | ipa_server_app_name | application name, used as prefix in the full instance name | `string` | `ipa` | yes |
        | ipa_server_instance_name| name of the instance, used in the full instance name | `string` | `server` | yes |
        | ipa_server_instance_index | index or identifier for the instance, used as suffix in the full instance name | `number` | `1` | yes |
        | ipa_server_flavor_name | name the flavor to use for the instance. To learn about available options, checkout the [official EWC VM plans documentation](https://confluence.ecmwf.int/display/EWCLOUDKB/EWC+VM+plans). üí° A VM plan with at least 4GB of RAM is recommended for successful setup and stable operation. | `string` | `eo1.large` | yes |
        | ipa_server_image_name | name of the image to use for the instance. For complete information on  available options, see the [official EWC Images documentation](https://confluence.ecmwf.int/display/EWCLOUDKB/EWC+Virtual+Images+Available). ‚ö†Ô∏è Only RockyLinux 9.5 and RockyLinux 8.10 VM images are currently supported. This is due to constrains imposed by the required ewc-ansible-role-ipa-server Ansible Role | `string` | `Rocky-8.10-20250604144456` | yes |
        | public_keypair_name | name of public keypair (stored in OpenStack) to be copied into the instance for remote SSH access | `string` | n/a | yes |
        | private_keypair_path | path to the local private keypair to use for SSH access to the instance  | `string` | `~/.ssh/id_rsa` | yes |
        | private_network_name | private network name to attach the instance | `string` | `private`  | yes |
        | security_group_name | security group name to apply to the instance  | `string` | `ipa` | yes |
        | ipa_domain | domain name to be managed by the IPA server. Example: `eumetsat.sandbox.ewc` | `string` | n/a | yes |
        | ipa_admin_username | username of administrator account to replace the default IPA admin | `string` | `ipaadmin` | yes |
        | ipa_admin_password | password of administrator account to replace the default IPA admin | `string` | n/a | yes |
        | ipa_admin_givenname | given name of the administrator to replace the default IPA admin (needs not be a physical person) | `string` | `EWC` | yes |
        | ipa_admin_surname | surname of the administrator to replace the default IPA admin (needs not to belong to a physical person)  | `string` | `IPAADMIN` | yes |
        
        
        ## Dependencies
        > ‚ö†Ô∏è Only RockyLinux 9.5 and RockyLinux 8.10 VM images are currently supported.
        This is due to constrains imposed by the required ewc-ansible-role-ipa-server
        Ansible Role.
        
        > üí° A VM plan with at least 4GB of RAM is recommended for successful setup and
        stable operation.
        
        | Name | Version | License | Home URL |
        |------|---------|-------|------|
        | ewc-tf-module-openstack-compute | 1.4 | MIT | https://github.com/ewcloud/ewc-tf-module-openstack-compute  |
        | ewc-ansible-role-ipa-server | 1.0 | MIT | https://github.com/ewcloud/ewc-ansible-role-ipa-server |

      home: https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning/blob/1.4.0/playbooks/ipa-server-provisioning
      sources:
        - https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning.git
      maintainers:
        - name: EWC Team
          email: support@europeanweather.cloud
          url: https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/EWCLogo.png
      annotations:
        technology: "Ansible Playbook,Terraform Module"
        category: "Security,Identity & Access Management,Compute"
        others: "Deployable"
        supportLevel: "EWC"
        licenseType: "MIT License"
      displayName: IPA Server Provisioning
      summary: Automates the creation or state update of VM, plus its configuration as FreeIPA server, streamlining centralized user management, authentication, authorization, and DNS resolution for secure and efficient resource management.
      license: https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning/blob/1.4.0/LICENSE
      published: true

    jupyterhub-flavour:
      name: "jupyterhub-flavour"
      version: "2.0.0"
      ewccli:
        pathToMainFile: playbooks/jupyterhub-flavour/jupyterhub-flavour.yml
        pathToRequirementsFile: requirements.yml
        inputs:
          - name: jupyterhub_local_cert_email
            description: "Email used for the certificate."
            type: str
          - name: dns_domain
            description: "DNS domain. If not present, it will try to guess from instance configured hostname in /etc/hostname."
            type: str
          - name: jupyterhub_local_env_wipe
            default: false
            description: "Boolean to decide whether to wipe the environment if exists prior to a reinstallation"
            type: bool
          - name: jupyterhub_local_env_name
            default: "jupyterhub-local"
            description: "Name of the environment containing the Jupyerhub."
            type: str
          - name: jupyterhub_local_test_cert
            default: false
            description: "Use Lets encrypt test certificate."
            type: bool
          - name: jupyterhub_local_with_otp
            default: false
            description: "Use OTP authentication for Jupyterhub. It requires manual run of google-authenticator by the user to configure your TOTP device after running this playbook"
            type: bool
          - name: conda_prefix
            default: "/opt/conda"
            description: "Prefix where conda is installed."
            type: str
          - name: conda_user
            default: "root"
            description: "User owning the conda installation. "
            type: str
        defaultSecurityGroups:
          - ssh-http-https
        externalIP: true
      description: |
        Installs and run JupyterHub on your instance, offering a convenient way to access it through the web.

        The default Authenticator uses PAM (Pluggable Authentication Module) to authenticate system users with their usernames and passwords.
        With the default Authenticator, any user with an account and password on the system will be allowed to login.
        See also [here](https://jupyterhub.readthedocs.io/en/5.2.1/tutorial/getting-started/authenticators-users-basics.html)

        Therefore in order to login you need to use username/password from a local user existing in the machine. 
      home: https://github.com/ewcloud/ewc-flavours/blob/2.0.0/playbooks/jupyterhub-flavour
      sources:
        - https://github.com/ewcloud/ewc-flavours.git
      maintainers:
        - name: EWC Team
          email: support@europeanweather.cloud
          url: https://github.com/ewcloud/ewc-flavours/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/EWCLogo.png
      annotations:
        technology: "Ansible Playbook"
        category: "Compute,Data Visualization,Data Processing"
        supportLevel: "EWC"
        licenseType: "Apache License 2.0"
        others: "Deployable,EWCCLI-compatible"
      displayName: JupyterHub Flavour
      summary: It installs and run jupyterhub on your instance, offering a convenient way to access it through the web.
      license: https://github.com/ewcloud/ewc-flavours/blob/2.0.0/LICENSE
      published: true

    ml-basic:
      name: "ml-basic"
      version: "1.0.1"
      ewccli:
        pathToMainFile: ml-basic.yml
      description: |
        Create a conda environment with the basic Machine Learning packages such as torch, xgboost, and scikit-learn. Check `files/env.yml` for all the details on the software included.

        Requirements
        ------------
        This ansible role depends on ewc-ansible-role-conda

        Role Variables
        --------------
        - `ml_basic_env_wipe`: Boolean to decide whether to wipe the environment if exists prior to a reinstallation. Default: no
        - `ml_basic_env_name`: Name of the environment containing the software stack. Default: ml-basic
        - `ml_basic_env_path`: Path to the environment containing the software stack. Default: `{{ conda_prefix }}/envs/{{ ml_basic_env_name }}`
        - `ml_basic_create_ipykernel`: Boolean to create a system-wide kernel available. Default: yes
        - `conda_prefix`: Prefix where conda is installed. Default: `/opt/conda`
        - `conda_user`: User owning the conda installation. Default: `root`

        Example Playbook
        ----------------

            - hosts: all
              roles:
                -  ewc-ansible-role-ml-basic

        License
        -------

        Apache 2.0.

        Author Information
        ------------------

        ECMWF for the European Weather Cloud
        
        <img src="https://climate.copernicus.eu/sites/default/files/inline-images/ECMWF.png"  width="120px" height="120px"> 
        
        ![ewc logo](https://europeanweather.cloud/sites/default/files/images/cloud-data-network-SW-v3.png){width=120px  height=120px}

      home: https://github.com/ewcloud/ewc-ecmwf-ai-stacks
      sources:
        - https://github.com/ewcloud/ewc-ecmwf-ai-stacks.git
      maintainers:
        - name: EWC Team
          email: support@europeanweather.cloud
          url: https://github.com/ewcloud/ewc-ecmwf-ai-stacks/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/EWCLogo.png
      annotations:
        technology: "Ansible Playbook"
        category: "Machine Learning & AI, GPU-accelerated"
        supportLevel: "EWC"
        licenseType: "Apache License 2.0"
        others: "Deployable,EWCCLI-compatible"
      displayName: ML Basic
      summary: It features an environment with the main machine learning packages like scikit-learn or torch.
      license: https://github.com/ewcloud/ewc-ecmwf-ai-stacks/blob/main/LICENSE
      published: true

    nwcsaf-datacube-xarray:
      name: "nwcsaf-datacube-xarray"
      version: "1.0.0"
      description: |
        Jupyter notebooks on using Icechunk, Virtualizar, and Kerchunk to enable Single-Point Access to Distributed Cloud Files through xarray.
        Accessing NWC SAF buckets with kerchunk/virtualizarr/icechunk

        ## Description

        This project is a collection of notebooks that demonstrate how to build virtual data cubes from NWC SAF data buckets. It focuses specifically on the bucket containing NWC SAF GEO outputs hosted on the European Weather Cloud (EWC). The bucket used is a precursor to the future MTG format of NWC SAF, containing files with a time dimension. This bucket is publicly accessible within the EWC infrastructure. The bucket name is:

        `nwc-saf.0-degree.level-2-cf`

        ‚ö†Ô∏è Important: These notebooks are designed to be executed inside the EWC environment.
        Please consider that these notebook should be executed inside the EWC.


        ## ‚öôÔ∏è Requirements
        - EWC access (https://www.europeanweather.cloud/)
        - Conda (Anaconda/Miniconda)


        ## Installation

        1. Clone the repository

        ```bash
        git clone https://gitlab.aemet.es/jllisov/vzarr.git
        cd vzarr
        ```

        2. Create the Conda environment

        ```bash
        conda env create -f environment.yml
        ```
        This will create a Conda environment named Vzarr with all necessary dependencies.

        3. Activate the environment

        ```bash
        conda activate Vzarr
        ```

        ## üìä Run the Jupyter Notebooks

        Once the environment is activated, launch JupyterLab:

        ```bash
        jupyter lab --ip 0.0.0.0 --port 8888
        ```

        Open the JupyterLab URL provided in the terminal and navigate to the notebooks.

      home: https://gitlab.aemet.es/jllisov/vzarr
      sources:
        - https://gitlab.aemet.es/jllisov/vzarr.git
      maintainers:
        - name: NWCSAF
          email: jllisov@aemet.es
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/NWCSAFLogo.png
      annotations:
        technology: "Jupyter Notebook"
        category: "Training,Data Access"
        supportLevel: "Community"
        licenseType: "MIT License"
      displayName: NWCSAF Datacube Xarray
      summary: Jupyter Notebooks for Unlocking Large Datasets on Cloud-Native Data Workflows.
      license: https://gitlab.aemet.es/jllisov/vzarr/-/blob/main/LICENSE
      published: true

    pytroll:
      name: "pytroll"
      version: "1.0.0"
      ewccli:
        pathToMainFile: satellite-data-processing-main.yaml
      description: |
        Playbooks to install and configure Pytroll-based satellite data processing pipelines and optionally a WMS server. These playbooks are used in the European Weather Cloud (EWC) environment.

        ## Overview

        `ewc-playbooks` provides **Ansible playbooks** to set up a robust, containerized environment for processing satellite data using the **Pytroll** ecosystem. Supported datasets include:

        - **FCI** ‚Äì Flexible Combined Imager (MTG-I)  
        - **SEVIRI** ‚Äì Spinning Enhanced Visible and Infrared Imager (MSG)  
        - **VIIRS** ‚Äì Visible Infrared Imaging Radiometer Suite (NOAA/NASA)

        Optionally, a **WMS server** can be deployed to serve processed imagery for visualization in GIS clients.

        **Key features:**

        - Automated provisioning of multiple containers.
        - Scalable and isolated pipelines for each satellite sensor.
        - Integration with [Pytroll tools](https://pytroll.github.io/) for reading, processing, and resampling satellite data.
        - Optional WMS server for serving processed data.

        ---


        ## Repository Structure
        ```
        ewc-playbooks/
        ‚îú‚îÄ‚îÄ fci-processing/
        ‚îú‚îÄ‚îÄ fci-wms/
        ‚îú‚îÄ‚îÄ seviri-processing/
        ‚îú‚îÄ‚îÄ seviri-wms/
        ‚îú‚îÄ‚îÄ viirs-processing/
        ‚îú‚îÄ‚îÄ viirs-wms/
        ‚îú‚îÄ‚îÄ defaults.yml
        ‚îú‚îÄ‚îÄ satellite-data-processing-main.yaml
        ‚îú‚îÄ‚îÄ README.md
        ‚îî‚îÄ‚îÄ LICENSE
        ```
        where:

        - **`*-processing/`**: Container builds and Ansible tasks for satellite processing.  
        - **`*-wms/`**: Container configuration for WMS services.  
        - **`defaults.yml`**: Default variables.  
        - **`satellite-data-processing-main.yaml`**: Main playbook orchestrating all deployments.

        ## Tested Platforms

        This playbook and container setup have been tested on the following platforms:

        | Operating System | Version       |
        |-----------------|---------------|
        | Ubuntu          | 22.04 LTS     |
        | Ubuntu          | 24.04 LTS     |
        | Rocky Linux     | 9             |

        > Note: Other Linux distributions may work but have not been officially tested.

        ## Run the Playbook

        1. Install Ansible

        You can install Ansible and other Python dependencies in a virtual environment:

        ```bash
        python3 -m venv venv
        source venv/bin/activate
        pip install ansible
        ```

        For more details, see the Ansible installation guide: https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html

        2. Define Your Inventory

        Create the inventory file to list your hosts and groups. Example:

        ```bash
        [satellite_hosts]
        localhost ansible_connection=local
        ```

        3. Run the main playbook (or any specific playbook) using:

        ```bash
        ansible-playbook -i inventory satellite-data-processing-main.yaml
        ```

        This will:
        - Build and launch containers for processing FCI, SEVIRI, and VIIRS data.
        - Optionally deploy WMS containers to serve processed outputs.

        ### Optional Variables

        You can customize the playbook behavior using the following variables:

        | Variable                | Default Value | Description                                           |
        |-------------------------|---------------|-------------------------------------------------------|
        | `satellite_data_type`   | `fci`         | Specify the satellite type to process (`fci`, `seviri`, `viirs`) |

        ### Passing Variables to Ansible

        You can override these defaults when running the playbook by using the `--extra-vars` (`-e`) flag:

        ```bash
        ansible-playbook -i inventory path/to/playbook/filename.yaml -e "satellite_data_type=seviri"
        ```

      home: https://github.com/nordsat/ewc-playbooks
      sources:
        - https://github.com/nordsat/ewc-playbooks.git
      maintainers:
        - name: NORDSAT
          url: https://github.com/nordsat/ewc-playbooks/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/pytrollLogo.png
      annotations:
        technology: "Ansible Playbook"
        category: "Compute,Data Processing"
        supportLevel: "Community"
        licenseType: "GNU General Public License v3.0"
        others: "Deployable,EWCCLI-compatible"
      displayName: Pytroll Processing
      summary: Playbooks to install pytroll processing and wms in the EWC.
      license: https://github.com/nordsat/ewc-playbooks/blob/main/LICENSE
      published: true

    remote-desktop-flavour:
      name: "remote-desktop-flavour"
      version: "1.4.0"
      ewccli:
        defaultImageName: Rocky-9.5-20250604142417
        pathToRequirementsFile: playbooks/remote-desktop-flavour/requirements.yml
        pathToMainFile: playbooks/remote-desktop-flavour/remote-desktop-flavour.yml
        inputs:
        - name: fail2ban_whitelisted_ip_ranges
          description: "IPv4 ranges (in CIDR format) to be whitelisted in Fail2ban configuration. When in doubt, do not set. Example: ['10.0.0.0/24','192.168.1.0/24']"
          type: List[str]
          default: None
      description: |
        This Ansible Playbook configures virtual machines within the
        [European Weather Cloud (EWC)](https://europeanweather.cloud/) to
        operate as a remote desktops, courtesy of [X2Go](https://wiki.x2go.org/doku.php).
        
        X2Go enables secure, graphical access to a desktop environment over low
        or high bandwidth connections, providing a seamless user experience for
        remote work. This template equips your VM with utility software you
        would expect to see in a typical and stable Linux distribution, ideal
        efficient and intuitive desktop operation.
        
        Special for tenant users needing remote graphical access in their EWC
        environment, this template simplifies the setup of basic cloud development
        solution. Follow the [instructions below](#usage) to get started.
        
        ## Functionality
        The template is designed to:
        - Configure a pre-existing Rocky Linux virtual machine (minimum 4GB RAM recommended) with
        the [MATE desktop environment](https://mate-desktop.org/).
        - Install and set up X2Go for secure remote desktop access over varying network conditions.
        - Enable end-users to interact with the VM through a graphical interface using the X2Go client
        application.
        
        ## Prerequisites
        
        To successfully run this playbook, the following packages should be available in your work environment:
        
        | Name | Version | License | Home URL |
        |------|---------|----- |-----|
        | git | >= 2.0 | GPLv2  | https://git-scm.com/downloads |
        | python | >= 3.9   | PSF | https://www.python.org/downloads  |
        | ansible | >= 2.15 |  GPLv3+ | https://pypi.org/project/ansible  |
        
        ## Usage
        
        ### 1. Download  Ansible dependencies
        >üí° By default, Ansible Roles are installed under the `~/.ansible/roles` directory within your working environment.
        
        Download the correct version of the Ansible dependencies, if you haven't done so already:
        
        ```
        ansible-galaxy role install -r requirements.yml
        ```
        
        ### 2. Specify the target host and SSH credentials
        Create an inventory file to specify address/credentials that Ansible should use
        to reach the virtual machine you wish to configure:
        
        ```yaml
        # inventory.yml
        ---
        ewcloud:
          hosts:
            remote_desktop:
              ansible_python_interpreter: /usr/bin/python3
              ansible_host: <add the IPV4 address of the target host>
              ansible_ssh_private_key_file: <add the path to local SSH private key file>
              ansible_user: cloud-user
              ansible_ssh_common_args: -o StrictHostKeyChecking=accept-new
        
        ```
        
        ### 3. Configure and apply the template
        
        #### 3.1. Interactive Mode
        
        By running the following command, you can trigger an interactive session that
        prompts you for the necessary user inputs, and then applies changes to your
        target EWC environment:
        
        ```bash
        ansible-playbook -i inventory.yml remote-desktop-flavour.yml
        ```
        
        #### 3.2. Non-Interactive Mode
        
        >üí° To learn more about defining variables at runtime, checkout the
        [official Ansible documentation](https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_variables.html).
        
        You can also run in non-interactive mode by passing the
        `--extra-vars` or `-e` flag, followed by a map of  key-value pairs; one for
        each and every available input (see [inputs section](#inputs) below). For
        example:
        
        ```bash
        ansible-playbook \
          -i inventory.yml \
          -e '{"fail2ban_whitelisted_ip_ranges": ""}' \
          remote-desktop-flavour.yml
        ```
        
        ### 4. Install the local client and connect to your remote desktop
        >‚ö†Ô∏è When configuring a connection, be sure to select "MATE" (instead of
        "KDE" or any other options) in the `Session Type` drop-down list, towards the
        bottom of the `Session` tab. This is required for the local client to correctly
        communicate with your remote desktop.
        
        Install the remote desktop client on Microsoft Window, Mac OS or Linux by
        following the links on the [official X2Go installation page](https://wiki.x2go.org/doku.php/doc:installation:x2goclient). Then follow the [official X2Go client usage page](https://wiki.x2go.org/doku.php/doc:usage:x2goclient)
        if you do not know how to configure a new session.
        
        For a session creation
        example, representative of a typical EWC environment, checkout the Remote
        Desktop section of
        [this official EWC documentation page](https://confluence.ecmwf.int/display/EWCLOUDKB/EUMETSAT+tenancy%3A+Default+setup).
        
        ## Inputs
        
        | Name | Description | Type | Default | Required |
        |------|-------------|------|---------|----------|
        | fail2ban_whitelisted_ip_ranges | IPv4 ranges (in CIDR format) to be whitelisted in Fail2ban configuration. When in doubt, do not set. Example: `['10.0.0.0/24','192.168.1.0/24']` | `list(string)` | `''` | no |
        
        
        ## Dependencies
        
        > ‚ö†Ô∏è Only RockyLinux 8.10 and 9.5 instances are currently supported due
        to constrains imposed by the required ewc-ansible-role-remote-desktop Ansible
        Role.
        
        > üí° A VM plan with at least 4GB of RAM is recommended for successful setup and
        stable operation.
        
        | Name | Version | License |Home URL |
        |------|---------|-------|---|
        | ewc-ansible-role-remote-desktop | 1.2 | MIT |  https://github.com/ewcloud/ewc-ansible-role-remote-desktop |

      home: https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning/blob/1.4.0/playbooks/remote-desktop-flavour
      sources:
        - https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning.git
      maintainers:
        - name: EWC Team
          email: support@europeanweather.cloud
          url: https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/EWCLogo.png
      annotations:
        technology: "Ansible Playbook"
        category: "Remote Access & Desktop"
        others: "Deployable,EWCCLI-compatible"
        supportLevel: "EWC"
        licenseType: "MIT License"
      displayName: Remote Desktop Flavour
      summary: Transforms an existing VM into a secure, graphical desktop environment using X2Go and MATE, enabling simple remote access and intuitive cloud-based development for tenant users.
      license: https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning/blob/1.4.0/LICENSE
      published: true

    remote-desktop-provisioning:
      name: "remote-desktop-provisioning"
      version: "1.4.0"
      description: |
        >‚úÖ This template can be safely applied from any local work environment, even running outside an EWC tenancy's private network.
        
        The remote desktop is a regular RockyLinux instance equipped with [X2Go](https://wiki.x2go.org/doku.php).
        It enables you to access a graphical desktop computer running in your remote
        instance of choice, over a low bandwidth (or high bandwidth) connection.
        This means that you can connect to it via the
        [X2Go client](https://wiki.x2go.org/doku.php/doc:installation:x2goclient)
        to enjoy a regular desktop user experience.
        
        This is a configuration template
        (i.e. an [Ansible Playbook](https://docs.ansible.com/ansible/latest/playbook_guide/playbooks.html))
        to customize your environment in the
        [European Weather Cloud (EWC)](https://europeanweather.cloud/).
        
        The template is designed to:
        
        * Provision an instance via [Terraform](https://developer.hashicorp.com/terraform),
        with your specified Linux distribution and desired flavor (a.k.a VM plan):
          * If a `terraform.tfstate` [state file](https://developer.hashicorp.com/terraform/language/state)
          is not found under the user-defined directory, attempts to create the
          instance from scratch
        
          OR
          * if  `terraform.tfstate` file is found, leverages Terraform's out-of-the-box
        
          functionality to update the instance referenced on it
        * Configure the existing or newly provisioned instance such that it:
          * Enables users to operate the remote hosts through a graphical desktop
            (i.e. a [MATE desktop environment](https://mate-desktop.org/)), over a low or high bandwidth connection.
        
        After successful provisioning, you can leverage Terraform's functionality to modify or delete individual components safely. Each will have its own `main.tf` definition and `terraform.tfstate` state file under the corresponding user-defined local directories.
        
        To learn the basics about managing infrastructure with Terraform, check out [Terraform in 100 seconds](https://youtu.be/tomUWcQ0P3k?si=CJwZJ7UaqpynDU-d) on YouTube. You can also find a step-by-step example applied to the EWC on the [official EWC documentation](https://confluence.ecmwf.int/x/2EDOIQ).
        
        
        >üí° This template can be deployed in combination with complementary infrastructure as part of the [Default Stack Provisioning](https://europeanweather.cloud/community-hub/default-stack-provisioning) Community Hub Item.
        
        ## Prerequisites
        
        To successfully run this playbook, the following packages should be available in your work environment:
        
        | Name | Version | License | Home URL |
        |------|---------|----- |-----|
        | git | >= 2.0 | GPLv2  | https://git-scm.com/downloads |
        | python | >= 3.9   | PSF | https://www.python.org/downloads  |
        | ansible | >= 2.15 |  GPLv3+ | https://pypi.org/project/ansible  |
        | terraform | >= 0.14  | BSL   | https://developer.hashicorp.com/terraform/install |
        
        ## Usage
        
        ### 1. Download  Ansible dependencies
        >üí° By default, Ansible Roles are installed under the `~/.ansible/roles` directory within your working environment.
        
        Download the correct version of the Ansible dependencies, if you haven't done so already:
        
        ```
        ansible-galaxy role install -r requirements.yml
        ```
        
        ### 2. Configure and apply the template
        
        #### 2.1. Interactive Mode
        
        By running the following command, you can trigger an interactive session that
        prompts you for the necessary user inputs, and then applies changes to your
        target EWC environment:
        
        ```bash
        ansible-playbook remote-desktop-provisioning.yml
        ```
        
        #### 2.2. Non-Interactive Mode
        
        >üí° To learn more about defining variables at runtime, checkout the
        [official Ansible documentation](https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_variables.html).
        
        You can also run in non-interactive mode by passing the
        `--extra-vars` or `-e` flag, followed by a map of  key-value pairs; one for
        each and every available input (see [inputs section](#inputs) below). For example:
        
        ```bash
        ansible-playbook \
          -e '{
                "ewc_provider":"eumetsat",
                "remote_desktop_tf_project_path":"~/ewc/remote-desktop-1",
                "remote_desktop_app_name":"remote",
                "remote_desktop_instance_name":"desktop",
                "remote_desktop_instance_index":1,
                "remote_desktop_flavor_name":"eo1.large",
                "remote_desktop_image_name":"Rocky-9.5-20250604142417",
                "remote_desktop_instance_has_fip":"no",
                "public_keypair_name":"my-public-key-name",
                "private_keypair_path":"~/.ssh/id_rsa",
                "private_network_name":"private",
                "security_group_name":"ssh",
                "fail2ban_whitelisted_ip_ranges":""
            }' \
          remote-desktop-provisioning.yml
        ```
        
        ### 3. Install the local client and connect to your remote desktop
        >‚ö†Ô∏è When configuring a connection, be sure to select "MATE" (instead of
        "KDE" or any other options) in the `Session Type` drop-down list, towards the
        bottom of the `Session` tab. This is required for the local client to correctly
        communicate with your remote desktop.
        
        Install the remote desktop client on Microsoft Window, Mac OS or Linux by
        following the links on the [official X2Go installation page](https://wiki.x2go.org/doku.php/doc:installation:x2goclient). Then follow the [official X2Go client usage page](https://wiki.x2go.org/doku.php/doc:usage:x2goclient)
        if you do not know how to configure a new session.
        
        For a session creation
        example, representative of a typical EWC environment, checkout the Remote
        Desktop section of
        [this official EWC documentation page](https://confluence.ecmwf.int/display/EWCLOUDKB/EUMETSAT+tenancy%3A+Default+setup).
        
        
        ## Inputs
        
        | Name | Description | Type | Default | Required |
        |------|-------------|------|---------|----------|
        | ewc_provider | your target EWC provider. Must match that the provider of your OpenStack application credentials. Valid input values are `ecmwf` or `eumetsat`. | `string` | `eumetsat` | yes |
        | remote_desktop_tf_project_path | path to terraform working directory | `string` | `~/ewc/remote-desktop-1` | yes |
        | remote_desktop_app_name | application name, used as prefix in the full instance name | `string` | `remote` | yes |
        | remote_desktop_instance_name| name of the instance, used in the full instance name | `string` | `desktop` | yes |
        | remote_desktop_instance_index | index or identifier for the instance, used as suffix in the full instance name | `number` | `1` | yes |
        | remote_desktop_flavor_name | name the flavor to use for the instance. To learn about available options, checkout the [official EWC VM plans documentation](https://confluence.ecmwf.int/display/EWCLOUDKB/EWC+VM+plans). üí° A VM plan with at least 4GB of RAM is recommended for successful setup and stable operation. | `string` | `eo1.large` | yes |
        | remote_desktop_image_name | name of the image to use for the instance. For complete information on  available options, see the [official EWC Images documentation](https://confluence.ecmwf.int/display/EWCLOUDKB/EWC+Virtual+Images+Available). ‚ö†Ô∏è Only RockyLinux 8.10 and 9.5 instances are currently supported due to constrains imposed by the required ewc-ansible-role-remote-desktop Ansible Role | `string` | `Rocky-9.5-20250604142417` | yes |
        | remote_desktop_instance_has_fip | whether to assign a floating IP to the instance. Only `yes` will be accepted to approve | `string` | `no` | no |
        | public_keypair_name | name of public keypair (stored in OpenStack) to be copied into the instance for remote SSH access | `string` | n/a | yes |
        | private_keypair_path| path to the local private keypair to use for SSH access to the instance | `string` | `~/.ssh/id_rsa` | yes |
        | private_networks_name | private network name to attach the instance to  | `string` | `private` | yes |
        | security_group_name | security group name to apply to the instance | `string` | `ipa` | yes |
        | fail2ban_whitelisted_ip_ranges | IPv4 ranges (in CIDR format) to be whitelisted in Fail2ban configuration. When in doubt, do not set. Example: `['10.0.0.0/24','192.168.1.0/24']` | `list(string)` | `''` | no |
        
        ## Dependencies
        > ‚ö†Ô∏è Only RockyLinux 8.10 and 9.5 instances are currently supported due
        to constrains imposed by the required ewc-ansible-role-remote-desktop Ansible
        Role.
        
        > üí° A VM plan with at least 4GB of RAM is recommended for successful setup and
        stable operation.
        
        | Name | Version | License | Home URL |
        |------|---------|-------|------|
        | ewc-tf-module-openstack-compute | 1.4 | MIT | https://github.com/ewcloud/ewc-tf-module-openstack-compute  |
        | ewc-ansible-role-remote-desktop | 1.2 | MIT | https://github.com/ewcloud/ewc-ansible-role-remote-desktop |

      home:  https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning/blob/1.4.0/playbooks/remote-desktop-provisioning
      sources:
        - https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning.git
      maintainers:
        - name: EWC Team
          email: support@europeanweather.cloud
          url: https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/EWCLogo.png
      annotations:
        technology: "Ansible Playbook,Terraform Module"
        category: "Remote Access & Desktop,Compute"
        others: "Deployable"
        supportLevel: "EWC"
        licenseType: "MIT License"
      displayName: Remote Desktop Provisioning
      summary: Automates the creation or state update of a remote desktop VM, a basic yet secure cloud-based development environment with graphical interface. Uses X2Go and MATE to enable easy remote access for tenant users.
      license: https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning/blob/1.4.0/LICENSE
      published: true

    ssh-bastion-flavour:
      name: "ssh-bastion-flavour"
      version: "1.4.0"
      ewccli:
        defaultImageName: Rocky-9.5-20250604142417
        pathToRequirementsFile: playbooks/ssh-bastion-flavour/requirements.yml
        pathToMainFile: playbooks/ssh-bastion-flavour/ssh-bastion-flavour.yml
        inputs:
          - name: fail2ban_whitelisted_ip_ranges
            description: "IPv4 ranges (in CIDR format) to be whitelisted in Fail2ban configuration. When in doubt, do not set. Example: ['10.0.0.0/24','192.168.1.0/24']"
            type: List[str]
            default: None
      description: |
        The [SSH](https://en.wikipedia.org/wiki/Secure_Shell) bastion or proxy server
        is a barrier between your internal machines (which lack a public or floating IP
        address) and the public internet. With the SSH proxy, you'll have an extra layer of
        security on top of your instances. It's equipped with
        [Fail2ban](https://github.com/fail2ban/fail2ban),
        intrusion prevention software designed to prevent brute-force attacks.
        
        This template is for tenant admins wishing to hardening the way tenant users
        connect to the [European Weather Cloud (EWC)](https://europeanweather.cloud/),
        as well as tenant users whom are mindful about safe-keeping the compute resources
        or data withing their work environments.
        
        ## Functionality
        The template is designed to:
        
        * Configure a pre-existing virtual machine running RockyLinux, with public IP
        address, and a minimum recommended 4GB of RAM, as entrypoint for users who
        wish to reach private EWC networks, from the public internet, via SSH.
        
        ## Prerequisites
        
        To successfully run this playbook, the following packages should be available in your work environment:
        
        | Name | Version | License | Home URL |
        |------|---------|----- |-----|
        | git | >= 2.0 | GPLv2  | https://git-scm.com/downloads |
        | python | >= 3.9   | PSF | https://www.python.org/downloads  |
        | ansible | >= 2.15 |  GPLv3+ | https://pypi.org/project/ansible  |
        
        ## Usage
        
        ### 1. Download  Ansible dependencies
        >üí° By default, Ansible Roles are installed under the `~/.ansible/roles` directory within your working environment.
        
        Download the correct version of the Ansible dependencies, if you haven't done so already:
        
        ```
        ansible-galaxy role install -r requirements.yml
        ```
        
        ### 2. Specify the target host and SSH credentials
        Create an inventory file to specify address/credentials that Ansible should use
        to reach the virtual machine you wish to configure:
        
        ```yaml
        # inventory.yml
        ---
        ewcloud:
          hosts:
            ssh_bastion:
              ansible_python_interpreter: /usr/bin/python3
              ansible_host: <add the IPV4 address of the target host>
              ansible_ssh_private_key_file: <add the path to local SSH private key file>
              ansible_user: cloud-user
              ansible_ssh_common_args: -o StrictHostKeyChecking=accept-new
        ```
        
        ### 3. Configure and apply the template
        
        #### 3.1. Interactive Mode
        
        By running the following command, you can trigger an interactive session that
        prompts you for the necessary user inputs, and then applies changes to your
        target EWC environment:
        
        ```bash
        ansible-playbook -i inventory.yml ssh-bastion-flavour.yml
        ```
        
        #### 3.2. Non-Interactive Mode
        
        >üí° To learn more about defining variables at runtime, checkout the
        [official Ansible documentation](https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_variables.html).
        
        You can also run in non-interactive mode by passing the
        `--extra-vars` or `-e` flag, followed by a map of  key-value pairs; one for
        each and every available input (see [inputs section](#inputs) below). For
        example:
        
        ```bash
        ansible-playbook \
          -i inventory.yml \
          -e '{"fail2ban_whitelisted_ip_ranges":""}' \
          ssh-bastion-flavour.yml
        ```
        
        ## Inputs
        
        | Name | Description | Type | Default | Required |
        |------|-------------|------|---------|----------|
        | fail2ban_whitelisted_ip_ranges | IPv4 ranges (in CIDR format) to be whitelisted in Fail2ban configuration. When in doubt, do not set. Example: `['10.0.0.0/24','192.168.1.0/24']` | `list(string)` | `''` | no |
        
        ## Dependencies
        
        > ‚ö†Ô∏è Only RockyLinux 9.5 and RockyLinux 8.10 instances are currently supported due
        to constrains imposed by the required ewc-ansible-role-ssh-bastion Ansible
        Role.
        
        > üí° A VM plan with at least 4GB of RAM is recommended for successful setup and
        stable operation.
        
        | Name | Version | License |Home URL |
        |------|---------|-------|-------|
        | ewc-ansible-role-ssh-bastion | 1.4 | MIT | https://github.com/ewcloud/ewc-ansible-role-ssh-bastion |

      home: https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning/tree/1.4.0/playbooks/ssh-bastion-flavour
      sources:
        - https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning.git
      maintainers:
        - name: EWC Team
          email: support@europeanweather.cloud
          url: https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/EWCLogo.png
      annotations:
        technology: "Ansible Playbook"
        category: "Remote Access & Desktop"
        others: "Deployable,EWCCLI-compatible"
        supportLevel: "EWC"
        licenseType: "MIT License"
      displayName: SSH Bastion Flavour
      summary: Tightens the configuration of a running VM, to operate as a secure SSH proxy with Fail2ban, providing tenant admins and users a fortified entry point to safely access private EWC networks from the public internet.
      license: https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning/blob/1.4.0/LICENSE
      published: true

    ssh-bastion-provisioning:
      name: "ssh-bastion-provisioning"
      version: "1.4.0"
      description: |
        >‚úÖ This template can be safely applied from any local work environment, even running outside an EWC tenancy's private network.
        
        The [SSH](https://en.wikipedia.org/wiki/Secure_Shell) proxy or bastion server
        is a barrier between your internal machines (without public or floating IPs)
        and the public internet. With the SSH proxy, you'll have an extra layer of
        security on top of your instances. It's equipped with
        [Fail2ban](https://github.com/fail2ban/fail2ban),
        intrusion prevention software designed to prevent brute-force attacks.
        
        This is a configuration template
        (i.e. an [Ansible Playbook](https://docs.ansible.com/ansible/latest/playbook_guide/playbooks.html))
        to customize your environment in the
        [European Weather Cloud (EWC)](https://europeanweather.cloud/).
        
        The template is designed to:
        
        * Provision an instance via [Terraform](https://developer.hashicorp.com/terraform),
        with your specified Linux distribution and desired flavor (a.k.a VM plan):
          * If a `terraform.tfstate` [state file](https://developer.hashicorp.com/terraform/language/state)
          is not found under the user-defined directory, attempts to create the
          instance from scratch
        
          OR
          * if  `terraform.tfstate` file is found, leverages Terraform's out-of-the-box
          functionality to update the instance referenced on it
        * Configure the existing or newly provisioned RockyLinux virtual machines (with
        public IP address), as entrypoint for users who wish to reach private EWC networks
         from the public internet via SSH.
        
        After successful provisioning, you can leverage Terraform's functionality to modify or delete individual components safely. Each will have its own `main.tf` definition and `terraform.tfstate` state file under the corresponding user-defined local directories.
        
        To learn the basics about managing infrastructure with Terraform, check out [Terraform in 100 seconds](https://youtu.be/tomUWcQ0P3k?si=CJwZJ7UaqpynDU-d) on YouTube. You can also find a step-by-step example applied to the EWC on the [official EWC documentation](https://confluence.ecmwf.int/x/2EDOIQ).
        
        ## Prerequisites
        
        To successfully run this playbook, the following packages should be available in your work environment:
        
        | Name | Version | License | Home URL |
        |------|---------|----- |-----|
        | git | >= 2.0 | GPLv2  | https://git-scm.com/downloads |
        | python | >= 3.9   | PSF | https://www.python.org/downloads  |
        | ansible | >= 2.15 |  GPLv3+ | https://pypi.org/project/ansible  |
        | terraform | >= 0.14  | BSL   | https://developer.hashicorp.com/terraform/install |
        
        ## Usage
        
        ### 1. Download  Ansible dependencies
        >üí° By default, Ansible Roles are installed under the `~/.ansible/roles` directory within your working environment.
        
        Download the correct version of the Ansible dependencies, if you haven't done so already:
        
        ```
        ansible-galaxy role install -r requirements.yml
        ```
        
        ### 2. Configure and apply the template
        
        #### 2.1. Interactive Mode
        
        By running the following command, you can trigger an interactive session that
        prompts you for the necessary user inputs, and then applies changes to your
        target EWC environment:
        
        ```bash
        ansible-playbook ssh-bastion-provisioning.yml
        ```
        
        #### 2.2. Non-Interactive Mode
        
        >üí° To learn more about defining variables at runtime, checkout the
        [official Ansible documentation](https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_variables.html).
        
        You can also run in non-interactive mode by passing the
        `--extra-vars` or `-e` flag, followed by a map of  key-value pairs; one for
        each and every available input (see [inputs section](#inputs) below). For example:
        
        ```bash
        ansible-playbook \
          -e '{
                "ewc_provider":"eumetsat",
                "ssh_bastion_tf_project_path":"~/ewc/ssh-bastion-1",
                "ssh_bastion_app_name":"ssh",
                "ssh_bastion_instance_name":"bastion",
                "ssh_bastion_instance_index":1,
                "ssh_bastion_flavor_name":"eo1.large",
                "ssh_bastion_image_name":"Rocky-9.5-20250604142417",
                "public_keypair_name":"my-public-key-name",
                "private_keypair_path":"~/.ssh/id_rsa",
                "private_network_name":"private",
                "security_group_name":"ssh",
                "fail2ban_whitelisted_ip_ranges":""
            }' \
          ssh-bastion-provisioning.yml
        ```
        ## Inputs
        
        | Name | Description | Type | Default | Required |
        |------|-------------|------|---------|----------|
        | ewc_provider | your target EWC provider. Must match that the provider of your OpenStack application credentials. Valid input values are `ecmwf` or `eumetsat`. | `string` | `eumetsat` | yes |
        | ssh_bastion_tf_project_path | path to terraform working directory | `string` | `~/ewc/ssh-bastion-1` | yes |
        | ssh_bastion_app_name | application name, used as prefix in the full instance name  | `string` | `ssh` | yes |
        | ssh_bastion_instance_name| name of the instance, used in the full instance name | `string` | `bastion` | yes |
        | ssh_bastion_instance_index | index or identifier for the instance, used as suffix in the full instance name | `number` | `1` | yes |
        | ssh_bastion_flavor_name | name the flavor to use for the instance. To learn about available options, checkout the [official EWC VM plans documentation](https://confluence.ecmwf.int/display/EWCLOUDKB/EWC+VM+plans). üí° A VM plan with at least 4GB of RAM is recommended for successful setup and stable operation. | `string` | `eo1.large` | yes |
        | ssh_bastion_image_name | name of the image to use for the instance. For complete information on  available options, see the [official EWC Images documentation](https://confluence.ecmwf.int/display/EWCLOUDKB/EWC+Virtual+Images+Available). ‚ö†Ô∏è Only RockyLinux 9.5 and RockyLinux 8.10 instances are currently supported due to constrains imposed by the required ewc-ansible-role-ssh-bastion Ansible Role  | `string` | `Rocky-9.5-20250604142417` | yes |
        | public_keypair_name | name of public keypair (stored in OpenStack) to be copied into the instance for remote SSH access | `string` | n/a | yes |
        | private_keypair_name | path to the local private keypair to use for SSH access to the instance  | `string` | `~/.ssh/id_rsa` | yes |
        | private_network_name | private network name to attach the instance to  | `string` | `private` | yes |
        | security_group_name | security group name to apply to the instance | `string` | `ssh` | yes |
        | fail2ban_whitelisted_ip_ranges | IPv4 ranges (in CIDR format) to be whitelisted in Fail2ban configuration. Example: `['10.0.0.0/24','192.168.1.0/24']` | `list(string)` | `''` | no |
        
        ## Dependencies
        > ‚ö†Ô∏è Only RockyLinux 9.5 and RockyLinux 8.10 instances are currently supported due
        to constrains imposed by the required ewc-ansible-role-ssh-bastion Ansible
        Role.
        
        > üí° A VM plan with at least 4GB of RAM is recommended for successful setup and
        stable operation.
        
        | Name | Version | License | Home URL |
        |------|---------|-------|------|
        | ewc-tf-module-openstack-compute | 1.0 | MIT | https://github.com/ewcloud/ewc-tf-module-openstack-compute  |
        | ewc-ansible-role-ssh-bastion | 1.4 | MIT | https://github.com/ewcloud/ewc-ansible-role-ssh-bastion |

      home: https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning/blob/1.4.0/playbooks/ssh-bastion-provisioning
      sources:
        - https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning.git
      maintainers:
        - name: EWC Team
          email: support@europeanweather.cloud
          url: https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/EWCLogo.png
      annotations:
        technology: "Ansible Playbook,Terraform Module"
        category: "Remote Access & Desktop,Compute"
        others: "Deployable"
        supportLevel: "EWC"
        licenseType: "MIT License"
      displayName: SSH Bastion Provisioning
      summary: Automates the creation or state update of a secure SSH bastion VM in the EWC, configured with Fail2ban to provide a fortified entry point for safely accessing private EWC networks from the public internet.
      license: https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning/blob/1.4.0/LICENSE
      published: true
