apiVersion: communityhub.europeanweather.cloud/v1alpha1
kind: CommunityHubCatalog
spec:
  items:
    ai-models:
      name: "ai-models"
      version: "0.9.0"
      description: |
        Create a conda environment with the ai-models package and associated plugins to run a set of data-driven weather forecasting models such as panguweather or graphcast. 

        Requirements
        ------------
        This ansible role depends on ewc-ansible-role-conda.

        Role Variables
        --------------
        - `ai_models_env_wipe`: Boolean to decide whether to wipe the environment if exists prior to a reinstallation. Default: no
        - `ai_models_env_name`: Name of the environment containing the software stack. Default: ml-basic
        - `ai_models_env_path`: Path to the environment containing the software stack. Default: `{{ conda_prefix }}/envs/{{ ai_models_env_name }}`
        - `ai_models_create_ipykernel`: Boolean to create a system-wide kernel available. Default: yes
        - `conda_prefix`: Prefix where conda is installed. Default: `/opt/conda`
        - `conda_user`: User owning the conda installation. Default: `root`

        Example Playbook
        ----------------

            - hosts: all
              roles:
                -  ewc-ansible-role-ai-models

        License
        -------

        Apache 2.0.

        Author Information
        ------------------

        ECMWF for the European Weather Cloud
        
        <img src="https://climate.copernicus.eu/sites/default/files/inline-images/ECMWF.png"  width="120px" height="120px"> 
        
        ![ewc logo](https://europeanweather.cloud/sites/default/files/images/cloud-data-network-SW-v3.png){width=120px  height=120px}

      home: https://github.com/ewcloud/ewc-ecmwf-ai-stacks
      sources:
        - https://github.com/ewcloud/ewc-ecmwf-ai-stacks/blob/main/ai-models.yml
      maintainers:
        - name: EWC Team
          email: support@ewcloud.int
          url: https://github.com/ewcloud/ewc-ecmwf-ai-stacks/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/EWCLogo.png
      annotations:
        technology: "Ansible Playbook"
        category: "Machine Learning & AI, GPU-accelerated"
        supportLevel: "EWC"
        licenseType: "Apache License 2.0"
      displayName: AI Models
      summary: It features the most popular data driven forecast models such as Pangu Weather, Fourcastnet or graphcast.
      license: https://github.com/ewcloud/ewc-ecmwf-ai-stacks/blob/main/LICENSE
      published: true

    ecmwf-aifs-single-mse:
      name: "ecmwf-aifs-single-mse"
      version: "1.0.0"
      description: |
        Create a conda environment with AIFS Single MSE and associated software stack.

        Requirements
        ------------

        This ansible role depends on ewc-ansible-role-conda and needs to be applied on a GPU-powered instance.

        Role Variables
        --------------

        - `aifs_single_mse_env_wipe`: Boolean to decide whether to wipe the environment if exists prior to a reinstallation. Default: no
        - `aifs_single_mse_env_name`: Name of the environment containing the software stack. Default: aifs-single-mse
        - `aifs_single_mse_env_path`: Installation path for the environment. Default: "{{ conda_prefix }}/envs/{{ aifs_single_mse_env_name }}"
        - `aifs_single_mse_checkpoint`: URL to the model checkpoint. Default: https://huggingface.co/ecmwf/aifs-single-1.0/resolve/main/aifs-single-mse-1.0.ckpt
        - `aifs_single_mse_create_ipykernel`: Create the jupyter kernel for this environment. Default: yes
        - `conda_prefix`: Prefix where conda is installed. Default: `/opt/conda`
        - `conda_user`: User owning the conda installation. Default: `root`

        Example Playbook
        ----------------

            - hosts: all
              roles:
                -  ewc-ansible-role-aifs-single-mse

        License
        -------

        Apache 2.0.

        Author Information
        ------------------

        ECMWF for the European Weather Cloud
        
        <img src="https://climate.copernicus.eu/sites/default/files/inline-images/ECMWF.png"  width="120px" height="120px"> 
        
        ![ewc logo](https://europeanweather.cloud/sites/default/files/images/cloud-data-network-SW-v3.png){width=120px  height=120px}

      home: https://github.com/ewcloud/ewc-ecmwf-ai-stacks
      sources:
        - https://github.com/ewcloud/ewc-ecmwf-ai-stacks/blob/main/aifs-single-mse.yml
      maintainers:
        - name: EWC Team
          email: support@ewcloud.int
          url: https://github.com/ewcloud/ewc-ecmwf-ai-stacks/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/EWCLogo.png
      annotations:
        technology: "Ansible Playbook"
        category: "Machine Learning & AI, GPU-accelerated"
        supportLevel: "EWC"
        licenseType: "Apache License 2.0"
      displayName: ECMWF AIFS Single MSE
      summary: It features the ECMWF AIFS Single data-driven model
      license: https://github.com/ewcloud/ewc-ecmwf-ai-stacks/blob/main/LICENSE
      published: true

    ecmwf-anemoi:
      name: "ecmwf-anemoi"
      version: "1.0.0"
      description: |
        Create a conda environment with the Anemoi framework for weather forecasting based on machine learning and associated software stack.
        
        Requirements
        ------------

        This ansible role depends on ewc-ansible-role-conda and needs to be applied on a GPU-powered instance if training or inference are used.

        Role Variables
        --------------

        - `anemoi_env_wipe`: Boolean to decide whether to wipe the environment if exists prior to a reinstallation. Default: no
        - `anemoi_env_name`: Name of the environment containing the software stack. Default: aifs-single-mse
        - `anemoi_env_path`: Installation path for the environment. Default: "{{ conda_prefix }}/envs/{{ anemoi_env_name }}"
        - `anemoi_create_ipykernel`: Create the jupyter kernel for this environment. Default: yes
        - `conda_prefix`: Prefix where conda is installed. Default: `/opt/conda`
        - `conda_user`: User owning the conda installation. Default: `root`

        Example Playbook
        ----------------

            - hosts: all
              roles:
                -  ewc-ansible-role-anemoi

        License
        -------

        Apache 2.0.

        Author Information
        ------------------

        ECMWF for the European Weather Cloud
        
        <img src="https://climate.copernicus.eu/sites/default/files/inline-images/ECMWF.png"  width="120px" height="120px"> 
        
        ![ewc logo](https://europeanweather.cloud/sites/default/files/images/cloud-data-network-SW-v3.png){width=120px  height=120px}

      home: https://github.com/ewcloud/ewc-ecmwf-ai-stacks
      sources:
        - https://github.com/ewcloud/ewc-ecmwf-ai-stacks/blob/main/anemoi.yml
      maintainers:
        - name: EWC Team
          email: support@ewcloud.int
          url: https://github.com/ewcloud/ewc-ecmwf-ai-stacks/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/EWCLogo.png
      annotations:
        technology: "Ansible Playbook"
        category: "Machine Learning & AI, GPU-accelerated"
        supportLevel: "EWC"
        licenseType: "Apache License 2.0"
      displayName: ECMWF Anemoi
      summary: It leverages the Anemoi framework to develop and run your AI-models or manage datasets.
      license: https://github.com/ewcloud/ewc-ecmwf-ai-stacks/blob/main/LICENSE
      published: true

    ecmwf-data-flavour:
      name: "ecmwf-data-flavour"
      version: "1.0.0"
      description: |
        Includes the basic ECMWF software stack, with MARS client and an environment with `ecCodes`, `Metview`, `Earthkit` and `Aviso`.
        
        Getting started
        ---------------
        
        * Clone or download the code from the source repository.
        * Install ansible and other dependencies. You may want to do it in its own virtual environment (`pip install -r requirements.txt`)
        * Fetch the external requirements
          ```bash
          $ ansible-galaxy role install -r requirements.yml roles/
          ```
        
        * Define your inventory in `inventory`
        * Run the apropriate playbook 
        
          ```bash
          $ ansible-playbook -i inventory ecmwf-data-flavour.yml
          ```

        You may use the following ansible variables to customise this playbook:
        
        | Variable | Description | Type | Default | Required |
        |------|-------------|------|---------|----------|
        | reboot_if_required | Reboot the instance if required after an update. | `boolean`| `true` | no |
        | ecmwf_toolbox_env_wipe | Decide whether to wipe the environment if exists prior to a reinstallation. | `boolean` | `no` | no |
        | ecmwf_toolbox_env_wipe | Name of the environment containing the ECMWF toolbox. | `string` | `ecmwf-toolbox` | no |
        | ecmwf_toolbox_create_ipykernel | Create a system-wide kernel available. | `boolean` | yes | no |
        | conda_prefix | Prefix where conda is installed. | `string` | `/opt/conda` | no |
        | conda_user | User owning the conda installation. | `string` | `root` | no |
      
        Example usage:
      
        ```bash
        ansible-playbook -i inventory ecmwf-data-flavour.yml
        ```
        
        Author
        ------------------
        ECMWF for the European Weather Cloud
        
        <img src="https://climate.copernicus.eu/sites/default/files/inline-images/ECMWF.png"  width="120px" height="120px"> 
        
        ![ewc logo](https://europeanweather.cloud/sites/default/files/images/cloud-data-network-SW-v3.png){width=120px  height=120px}

      home: https://github.com/ewcloud/ewc-flavours
      sources:
        - https://github.com/ewcloud/ewc-flavours/blob/766090d57b3ad18d89f999e0601cb1fdf1e14eda/ecmwf-data-flavour.yml
      maintainers:
        - name: EWC Team
          email: support@ewcloud.int
          url: https://github.com/ewcloud/ewc-flavours/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/EWCLogo.png
      annotations:
        technology: "Ansible Playbook"
        category: "Compute,Data Access"
        supportLevel: "EWC"
        licenseType: "Apache License 2.0"
      displayName: ECMWF Data Flavour
      summary: It includes the basic ECMWF software stack, with MARS client and an environment with `ecCodes`, `Metview`, `Earthkit` and `Aviso`.
      license: https://github.com/ewcloud/ewc-flavours/blob/main/LICENSE
      published: true

    ecmwf-data-flavour-2.0.0:
      name: "ecmwf-data-flavour"
      version: "2.0.0"
      description: |
        Includes the basic ECMWF software stack, with MARS client and an environment with `ecCodes`, `Metview`, `Earthkit` and `Aviso`.
        
        Getting started
        ---------------
        
        * Clone or download the code from the source repository.
        * Install ansible and other dependencies. You may want to do it in its own virtual environment (`pip install -r requirements.txt`)
        * Fetch the external requirements
          ```bash
          $ ansible-galaxy role install -r requirements.yml roles/
          ```
        
        * Define your inventory in `inventory`
        * Run the apropriate playbook 
        
          ```bash
          $ ansible-playbook -i inventory ecmwf-data-flavour.yml
          ```

        You may use the following ansible variables to customise this playbook:
        
        | Variable | Description | Type | Default | Required |
        |------|-------------|------|---------|----------|
        | reboot_if_required | Reboot the instance if required after an update. | `boolean`| `true` | no |
        | ecmwf_toolbox_env_wipe | Decide whether to wipe the environment if exists prior to a reinstallation. | `boolean` | `no` | no |
        | ecmwf_toolbox_env_wipe | Name of the environment containing the ECMWF toolbox. | `string` | `ecmwf-toolbox` | no |
        | ecmwf_toolbox_create_ipykernel | Create a system-wide kernel available. | `boolean` | yes | no |
        | conda_prefix | Prefix where conda is installed. | `string` | `/opt/conda` | no |
        | conda_user | User owning the conda installation. | `string` | `root` | no |
      
        Example usage:
      
        ```bash
        ansible-playbook -i inventory ecmwf-data-flavour.yml
        ```
        
        Author
        ------------------
        ECMWF for the European Weather Cloud
        
        <img src="https://climate.copernicus.eu/sites/default/files/inline-images/ECMWF.png"  width="120px" height="120px"> 
        
        ![ewc logo](https://europeanweather.cloud/sites/default/files/images/cloud-data-network-SW-v3.png){width=120px  height=120px}

      home: https://github.com/ewcloud/ewc-flavours
      sources:
        - https://github.com/ewcloud/ewc-flavours/blob/766090d57b3ad18d89f999e0601cb1fdf1e14eda/ecmwf-data-flavour.yml
      maintainers:
        - name: EWC Team
          email: support@ewcloud.int
          url: https://github.com/ewcloud/ewc-flavours/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/EWCLogo.png
      annotations:
        technology: "Ansible Playbook"
        category: "Compute,Data Access"
        supportLevel: "EWC"
        licenseType: "Apache License 2.0"
      displayName: ECMWF Data Flavour
      summary: It includes the basic ECMWF software stack, with MARS client and an environment with `ecCodes`, `Metview`, `Earthkit` and `Aviso`.
      license: https://github.com/ewcloud/ewc-flavours/blob/main/LICENSE
      published: true

    eumetcast-terrestrial:
      name: "eumetcast-terrestrial"
      version: "1.0.0"
      description: |
        Service for receiving and processing EUMETCast Terrestrial data streams via IP multicast within a private network.
      home: https://github.com/ewcloud/ewc-flavours
      sources:
        - https://github.com/ewcloud/ewc-flavours/blob/main/eumetcast-terrestrial.yml
      maintainers:
        - name: EWC Team
          email: support@ewcloud.int
          url: https://github.com/ewcloud/ewc-flavours/issues
        - name: EWC Support Team
          email: testemail@ewcloud.int
          url: https://github.com/ewcloud/ewc-flavours/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/EWCLogo.png
      annotations:
        technology: "Ansible Playbook"
        category: "Networking,Data Reception"
        supportLevel: "EWC"
        licenseType: "MIT License"
        others: "Earth Observation,Eumetcast Terrestrial"
      displayName: EUMETCast Terrestrial
      summary: Service for receiving and processing EUMETCast Terrestrial data streams via IP multicast within a private network.
      license: https://github.com/ewcloud/ewc-flavours/blob/main/LICENSE
      published: true

    eumetsat-data-tailor-flavour:
      name: "eumetsat-data-tailor-flavour"
      version: "1.0.0"
      description: |
        This Ansible Playbook configures an existing virtual machine running
        within the [European Weather Cloud (EWC)](https://europeanweather.cloud/), to equip it with the Data Tailor Standalone and EUMETSAT Data Access Client (EUMDAC).

        ## Functionality
        > 💡 Unlike the Data Tailor Web Services (DTWS), which can be used with EUMDAC or via https://tailor.eumetsat.int, the standalone version is generally faster and does not have limitations such as maximum concurrent jobs or workspace size.

        The Data Tailor is a product customization toolbox designed to:
        * Enable users to tailor satellite data to their specific needs. 
        * Offers the ability to subset and aggregate data products across space and time, filter layers, generate quick looks, reproject data onto new coordinate reference systems, and reformat data into widely used Geographic Information System (GIS) formats such as netCDF and GeoTIFF, as well as image formats like JPEG and PNG. 
        * Customize data from various satellite collections, including METOP, MFG ,MSG, MTG (Meteosat Third Generation) and Sentinel-3. 

        For more information on capabilities of the Data Tailor, please refer to [Data Tailor Standalone Guide on User Portal](https://user.eumetsat.int/resources/user-guides/data-tailor-standalone-guide) and for more information about the available products and customisations inside the Data Tailor, please go to [Products and Customisations Available in the Data Tailor](https://user.eumetsat.int/resources/user-guides/data-store-detailed-guide#ID-Products-and-customisation-available-in-the-Data-Tailor) page.

        ## Prerequisites
        >💡 Versions listed correspond to minimal prerequisites.

        To successfully run this playbook, the following packages should be available in your work environment:

        | Name | Version | License | Home URL |
        |------|---------|----- |-----|
        | git | 2.0 | GPLv2  | https://git-scm.com/downloads |
        | python | 3.9   | PSF | https://www.python.org/downloads  |
        | ansible | 2.15 |  GPLv3+ | https://pypi.org/project/ansible  |

        ## Usage

        ### 1. Download  Ansible dependencies
        >💡 By default, Ansible Roles are installed under the `~/.ansible/roles` directory within your working environment.

        Download the correct version of the Ansible dependencies, if you haven't done so already:

        ```
        ansible-galaxy role install -r requirements.yml
        ```

        ### 2. Specify the target host and SSH credentials
        Create an inventory file to specify address/credentials that Ansible should use
        to reach the virtual machine you wish to configure:

        ```yaml
        # inventory.yml
        ---
        ewcloud:
          hosts:
            data_tailor:
              ansible_python_interpreter: /usr/bin/python3
              ansible_host: <add the IPV4 address of the target host>
              ansible_ssh_private_key_file: <add the path to local SSH private key file>
              ansible_user: <add the default user according to your chosen VM image>
              ansible_ssh_common_args: -o StrictHostKeyChecking=accept-new
        ```

        ### 3. Configure and apply the template

        #### 3.1. Interactive Mode

        By running the following command, you can trigger an interactive session that
        prompts you for the necessary user inputs, and then applies changes to your
        target EWC environment:

        ```bash
        ansible-playbook -i inventory.yml eumetsat-data-tailor-flavour.yml
        ```

        #### 3.2. Non-Interactive Mode

        >💡 To learn more about defining variables at runtime, checkout the
        [official Ansible documentation](https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_variables.html).

        You can also run in non-interactive mode by passing the
        `--extra-vars` or `-e` flag, followed by a map of  key-value pairs; one for
        each and every available input (see [inputs section](#inputs) below). For
        example:

        ```bash
        ansible-playbook \
          -i inventory.yml \
          -e '{
              "data_tailor_env_wipe": "no",
              "data_tailor_env_name": "epct-desktop",
              "conda_installer": "https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-x86_64.sh",
              "conda_update_base": "false",
              "conda_prefix": "/opt/conda",
              "conda_user": "root"
            }' \
          eumetsat-data-tailor-flavour.yml
        ```

        ## Inputs

        | Name | Description | Type | Default | Required |
        |------|-------------|------|---------|:--------:|
        | data_tailor_env_wipe | flag to delete existing conda environment where data tailor was previously installed. Only `yes` will be accepted to approve | `string` | `no` | yes |
        | data_tailor_env_name | name of conda environment where data tailor will be installed | `string` | `epct-desktop` | yes |
        | conda_installer  | URI of the installer to use | `string` | `https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-x86_64.sh` | yes |
        | conda_update_base | boolean to decide wether base environment needs updating | `bool` | `false` | yes |
        | conda_prefix | prefix where conda will be installed | `string` | `/opt/conda` | yes |
        | conda_user | user that will own the conda installation | `string` | `root` | yes |

        ## Dependencies
        > 💡 A VM plan with at least 16GB of RAM is recommended for successful setup and
        stable operation.

        | Name | Version | License | Home URL |
        |------|---------|------|------|
        | ewc-ansible-role-conda | 1.1 |  Apache-2.0 | https://github.com/ewcloud/ewc-ansible-role-conda |
        | ewc-ansible-role-data-tailor | 1.0 |  MIT | https://github.com/ewcloud/ewc-ansible-role-data-tailor |

      home: https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning
      sources:
        - https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning/blob/1.0.0/playbooks/eumetsat-data-tailor-flavour/eumetsat-data-tailor-flavour.yml
      inputs:
        - name: data_tailor_env_wipe
          description: flag to delete existing conda environment where data tailor was previously installed. Only yes will be accepted to approve
          type: str
          default: no
        - name: data_tailor_env_name
          description: name of conda environment where data tailor will be installed
          type: str
          default: epct-desktop
        - name: conda_installer
          description: URI of the installer to use
          type: str
          default: https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-x86_64.sh
        - name: conda_update_base
          description: boolean to decide wether base environment needs updating
          type: bool
          default: false
        - name: conda_prefix
          description: prefix where conda will be installed
          type: str
          default: /opt/conda
        - name: conda_user
          description: user that will own the conda installation
          type: str
          default: root
      maintainers:
        - name: EWC Team
          email: support@ewcloud.int
          url: https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/EWCLogo.png
      annotations:
        technology: "Ansible Playbook"
        category: "Data Processing,Deployable"
        supportLevel: "EWC-supported"
        licenseType: "MIT License"
        others: "Earth Observation,Fire monitoring"
      displayName: EUMETSAT Data Tailor flavour
      summary: Transforms an existing VM into a powerful satellite data customization hub, enabling users to efficiently subset, aggregate, reproject, and reformat data from METOP, MFG, MSG, MTG, and Sentinel-3 into GIS and image formats, offering faster processing and greater flexibility than web-based alternatives.
      license: https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning/blob/main/LICENSE
      published: true

    ewc-ansible-role-ssh-bastion:
      name: "ewc-ansible-role-ssh-bastion"
      version: "1.0.0"
      description: |
        This repository contains a configuration template 
        (i.e. an [Ansible Role](https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_reuse_roles.html)) 
        to customize your environment in the
        [European Weather Cloud (EWC)](https://europeanweather.cloud/).
        The template is designed to:
        * Configure pre-existing RockyLinux 8 or RockyLinux 9 virtual machines (with 
        public IP address), as entrypoint for users who wish to reach private
        EWC networks from the public internet via SSH.
        
        ## Usage
        
        The step-by-step described below assume your local file system follows the 
        example structure below, with `ewc-ansible-role-ssh-bastion` being a clone of this
        repository:
        ```
        .
        ├── ewc-ansible-role-ssh-bastion
        ├── inventory.yml
        └── playbook.yml
        ```
        
        ### 1. Specify the target host and SSH credentials
        Create an inventory file to specify address/credentials that Ansible should use
        to reach the virtual machine you wish to configure:
        ```yaml
        # inventory.yml
        ---
        ewcloud:
          hosts:
            ssh_bastion:
              ansible_python_interpreter: /usr/bin/bython3
              ansible_host: <add the IPV4 address of the target host>
              ansible_ssh_private_key_file: <add the path to local SSH RSA private key file>
              ansible_user: <add the username which owns the SSH RSA private key >
        ```
        ### 2. Customize the template
        
        Edit input values for the template [variables](./vars/main.yml) as needed (see
        [Inputs](#inputs) section for details).
        Then, proceed to create an Ansible Playbook file to load your customizations: 
        
        ```yaml
        # playbook.yml
        ---
        - name: SSH Bastion Library Item Automation Script
          hosts: ssh_bastion
          become: true
          become_user: root
          become_method: ansible.builtin.sudo
        
          roles:
            - ewc-ansible-role-ssh-bastion
        ```
        
        ### 3. Apply the template
        
        
        You can apply changes on the target host by running:
        ```bash
        ansible-playbook -i inventory.yml playbook.yml
        ```
        
        ## Inputs
        
        | Name | Description | Type | Default | Required |
        |------|-------------|------|---------|:--------:|
        | localhost_ip_ranges | Localhost IP range (in CIDR format) to be whitelisted by Fail2ban | `string` | `"127.0.0.1/8"` | yes |
        | private_ip_ranges | Private IP range or ranges (in CIDR format) to be whitelisted by Fail2ban | `string` | n/a | no |
        | public_ip_ranges | Public IP range or ranges (in CIDR format) to be whitelisted by Fail2ban | `string` | n/a | no |

      home: https://github.com/ewcloud/ewc-ansible-role-ssh-bastion
      sources:
        - https://github.com/ewcloud/ewc-ansible-role-ssh-bastion/blob/main
      maintainers:
        - name: EWC Team
          email: support@ewcloud.int
          url: https://github.com/ewcloud/ewc-ansible-role-ssh-bastion/issues
        - name: EWC Support Team
          email: support@europeanweather.cloud
          url: https://support.europeanweather.cloud/
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/EWCLogo.png
      annotations:
        technology: "Ansible Role"
        category: "Networking,Security,Access Management"
        supportLevel: "EWC-supported"
        licenseType: "MIT License"
      displayName: EWC Ansible Role SSH Bastion
      summary: Create secure SSH Bastion host providing controlled, audited access to private network resources.
      license: https://github.com/ewcloud/ewc-flavours/blob/main/LICENSE
      published: false
    
    ipa-client-enroll-flavour:
      name: "ipa-client-enroll-flavour"
      version: "1.0.0"
      description: |
        This Ansible Playbook configures an existing virtual machine in the
        [European Weather Cloud (EWC)](https://europeanweather.cloud/) to operate as a
        client of [IPA services](../ipa-server-flavour/).

        IPA provides integrated identity management and DNS services, enabling
        centralized user authentication, authorization, and resource discovery.

        Suitable for tenant admins and tenant users alike, this template simplifies the
        integration of VMs into a [FreeIPA](https://www.freeipa.org/page/Main_Page)-managed
        fleet of instances within the EWC environment. Follow the [instructions below](#usage)
        to enroll your instance.

        ## Functionality
        The template is designed to:
        - Configure a pre-existing virtual machine running Rocky Linux 8/9 or Ubuntu to connect to a
        IPA server on the same subnet.
        - Enable DNS resolution for discovering private hosts and public addresses.
        - Allow remote access to the VM using centrally managed LDAP users via password authentication.

        ## Prerequisites
        >💡 Versions listed correspond to minimal prerequisites.

        To successfully run this playbook, the following packages should be available in your work environment:

        | Name | Version | License | Home URL |
        |------|---------|----- |-----|
        | git | 2.0 | GPLv2  | https://git-scm.com/downloads |
        | python | 3.9   | PSF | https://www.python.org/downloads  |
        | ansible | 2.15 |  GPLv3+ | https://pypi.org/project/ansible  |

        ## Usage

        ### 1. Download  Ansible dependencies
        >💡 By default, Ansible Roles are installed under the `~/.ansible/roles` directory within your working environment.

        Download the correct version of the Ansible dependencies, if you haven't done so already:

        ```
        ansible-galaxy role install -r requirements.yml
        ```

        ### 2. Specify the target host and SSH credentials
        >💡 To find out which is the default user for your chosen VM image,
        checkout the [official EWC documentation](https://confluence.ecmwf.int/display/EWCLOUDKB/EWC+-+VM+images+and+default+users).

        Create an inventory file to specify address/credentials that Ansible should use
        to reach the virtual machine you wish to configure:

        ```yaml
        # inventory.yml
        ---
        ewcloud:
          hosts:
            ipa_client:
              ansible_python_interpreter: /usr/bin/python3
              ansible_host: <add the IPV4 address of the target host>
              ansible_ssh_private_key_file: <add the path to local SSH private key file>
              ansible_user: <add the default user according to your chosen VM image>
              ansible_ssh_common_args: -o StrictHostKeyChecking=accept-new

        ```

        ### 3. Configure and apply the template

        #### 3.1. Interactive Mode

        By running the following command, you can trigger an interactive session that
        prompts you for the necessary user inputs, and then applies changes to your
        target EWC environment:

        ```bash
        ansible-playbook -i inventory.yml ipa-client-enroll-flavour.yml
        ```

        #### 3.2. Non-Interactive Mode

        >💡 To learn more about defining variables at runtime, checkout the
        [official Ansible documentation](https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_variables.html).

        You can also run in non-interactive mode by passing the
        `--extra-vars` or `-e` flag, followed by a map of  key-value pairs; one for
        each and every available input (see [inputs section](#inputs) below). For
        example:

        ```bash
        ansible-playbook \
          -i inventory.yml \
          -e '{
                "ipa_client_hostname": "ipa-client-1",
                "ipa_domain": "eumetsat.sandbox.ewc",
                "ipa_server_hostname": "ipa-server-1",
                "ipa_admin_username": "ipaadmin",
                "ipa_admin_password": "my-secret-password"
            }' \
          ipa-client-enroll-flavour.yml
        ```

        ## Inputs

        | Name | Description | Type | Default | Required |
        |------|-------------|------|---------|----------|
        | ipa_client_hostname | hostname of the target vm where the IPA client will be installed. Example: `ipa-client-1` | `string`| n/a | yes |
        | ipa_domain | domain name managed by the IPA server. Example: `eumetsat.sandbox.ewc` | `string` | n/a | yes |
        | ipa_server_hostname | hostname of the IPA server. Example: `ipa-server-1` | `string`| n/a | yes |
        | ipa_admin_username | username of the administrator account from the IPA server. Example: `ipaadmin` | `string` | n/a | yes |
        | ipa_admin_password | password of the administrator account from the IPA server. Example: `my-secret-password` | `string` | n/a | yes |
        | password_allowed_ip_ranges | IP addresses or IP ranges (in CIDR format) to be allowed for password access in SSHD configuration. When in doubt, add only IP addresses you know and trust. Example: `['10.0.0.0/24','192.168.1.0/24']` | `list(string)` | `['10.0.0.0/8','172.16.0.0/12','192.168.0.0/16']` | no |

        ## Dependencies
        > ⚠️ Only Ubuntu 22.04 and RockyLinux 8.10 VM images are currently supported.
        This is due to constrains imposed by the required
        ewc-ansible-role-ipa-client-enroll Ansible Role.

        | Name | Version | License |Home URL |
        |------|---------|------|-----|
        | ewc-ansible-role-ipa-client-enroll | 1.0 | MIT | https://github.com/ewcloud/ewc-ansible-role-ipa-client-enroll |

      home: https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning
      sources:
        - https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning/blob/1.0.0/playbooks/ipa-client-enroll-flavour/ipa-client-enroll-flavour.yml
      inputs:
        - name: ipa_client_hostname
          description: "hostname of the target vm where the IPA client will be installed. Example: ipa-client-1"
          type: str
        - name: ipa_domain
          description: "domain name managed by the IPA server. Example: eumetsat.sandbox.ewc"
          type: str
        - name: ipa_server_hostname
          description: "hostname of the IPA server. Example: ipa-server-1"
          type: str
        - name: ipa_admin_username
          description: "password of the administrator account from the IPA server. Example: my-secret-password"
          type: str
        - name: ipa_admin_password
          description: "username of the administrator account from the IPA server. Example: ipaadmin"
          type: str
        - name: password_allowed_ip_ranges
          description: "IP addresses or IP ranges (in CIDR format) to be allowed for password access in SSHD configuration. When in doubt, add only IP addresses you know and trust. Example: ['10.0.0.0/24','192.168.1.0/24']"
          type: List[str]
          default: ['10.0.0.0/8','172.16.0.0/12','192.168.0.0/16']
      maintainers:
        - name: EWC Team
          email: support@ewcloud.int
          url: https://github.com/ewcloud/ewc-flavours/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/EWC%20-%20Emblem%20color.png
      annotations:
        technology: "Ansible Playbook"
        category: "Security,Identity & Access Management,Deployable"
        supportLevel: "EWC-supported"
        licenseType: "MIT License"
      displayName: IPA Client Enroll
      summary: Seamlessly integrates a running VM into a FreeIPA-managed fleet of instances, enabling centralized user authentication, DNS resolution, and secure remote access for simplified and scalable identity management.
      license: https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning/blob/main/LICENSE
      published: true

    ipa-client-disenroll-flavour:
      name: "ipa-client-disenroll-flavour"
      version: "1.0.0"
      description: |
        IPA CLient Disenroll.
      home: https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning
      sources:
        - https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning/blob/1.0.0/playbooks/ipa-client-disenroll-flavour/ipa-client-disenroll-flavour.yml
      inputs:
        - name: ipa_domain
          description: "domain name managed by the IPA server. Example: eumetsat.sandbox.ewc"
          type: str
        - name: ipa_client_hostname
          description: "hostname of the target vm to be disenrolled from the IPA server. Example: ipa-client-1"
          type: str
        - name: ipa_server_hostname
          description: "hostname of the IPA server. Example: ipa-server-1"
          type: str
        - name: ipa_admin_username
          description: "username of the administrator account from the IPA server. Example: ipaadmin"
          type: str
        - name: ipa_server_hostname
          description: "password of the administrator account from the IPA server. Example: my-secret-password"
          type: str
      maintainers:
        - name: EWC Team
          email: support@ewcloud.int
          url: https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/EWC%20-%20Emblem%20color.png
      annotations:
        technology: "Ansible Playbook"
        category: "Security,Identity & Access Management,Deployable"
        supportLevel: "EWC-supported"
        licenseType: "MIT License"
      displayName: IPA Client Disenroll flavour
      summary: Simplifies the secure removal of a running VM from a FreeIPA-managed fleet of instances, reducing administrative overhead and enhancing security by eliminating stale credentials and DNS records. 
      license: https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning/blob/main/LICENSE
      published: true

    ipa-server-flavour:
      name: "ipa-server-flavouot"
      version: "1.0.0"
      description: |
        This Ansible Playbook configures an existing virtual machine running
        within the [European Weather Cloud (EWC)](https://europeanweather.cloud/)
        to operate as a [FreeIPA](https://www.freeipa.org/page/Main_Page) server.

        IPA (acronym for identity, policy and audit), provides integrated identity
        management and DNS services, enabling centralized user authentication, authorization,
        and resource discovery.

        Ideal for tenant administrators, this template simplifies the setup
        of a secure, open-source identity and DNS solution in the EWC environment. Follow the
        [instructions below](#usage) to configure your server.

        ## Functionality
        The template is designed to:
        * Validate that network/subnet configuration in the EWC tenancy
        * Configure a pre-existing virtual machine running RockyLinux version 8 or 9,
        and with a minimum recommended 4GB of RAM, such that it:
          * Provides DNS resolutions for discovery of resources (i.e. other virtual
          machines)
          * Enables centralized user and credentials creation/edition/deletion/authentication
          * Allows centralized authorization between users and resources
        * Automatically update the underlying subnet DNS nameserver to point to the
        newly configured IPA server

        ## Prerequisites
        >💡 Versions listed correspond to minimal prerequisites.

        To successfully run this playbook, the following packages should be available in your work environment:

        | Name | Version | License | Home URL |
        |------|---------|----- |-----|
        | git | 2.0 | GPLv2  | https://git-scm.com/downloads |
        | python | 3.9   | PSF | https://www.python.org/downloads  |
        | ansible | 2.15 |  GPLv3+ | https://pypi.org/project/ansible  |

        ## Usage

        ### 1. Download  Ansible dependencies
        >💡 By default, Ansible Roles are installed under the `~/.ansible/roles` directory within your working environment.

        Download the correct version of the Ansible dependencies, if you haven't done so already:

        ```
        ansible-galaxy role install -r requirements.yml
        ```

        ### 2. Specify the target host and SSH credentials
        Create an inventory file to specify address/credentials that Ansible should use
        to reach the virtual machine you wish to configure:

        ```yaml
        # inventory.yml
        ---
        ewcloud:
          hosts:
            ipa_server:
              ansible_python_interpreter: /usr/bin/python3
              ansible_host: <add the IPV4 address of the target host>
              ansible_ssh_private_key_file: <add the path to local SSH private key file>
              ansible_user: cloud-user
              ansible_ssh_common_args: -o StrictHostKeyChecking=accept-new
        ```

        ### 3. Configure and apply the template

        #### 3.1. Interactive Mode

        By running the following command, you can trigger an interactive session that
        prompts you for the necessary user inputs, and then applies changes to your
        target EWC environment:

        ```bash
        ansible-playbook -i inventory.yml ipa-server-flavour.yml
        ```

        #### 3.2. Non-Interactive Mode

        >💡 To learn more about defining variables at runtime, checkout the
        [official Ansible documentation](https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_variables.html).

        You can also run in non-interactive mode by passing the
        `--extra-vars` or `-e` flag, followed by a map of  key-value pairs; one for
        each and every available input (see [inputs section](#inputs) below). For
        example:

        ```bash
        ansible-playbook \
          -i inventory.yml \
          -e '{
              "ipa_domain": "eumetsat.sandbox.ewc",
              "ipa_server_hostname": "ipa-server-1",
              "ipa_admin_username": "ipaadmin",
              "ipa_admin_password": "my-secret-password",
              "ipa_admin_givenname": "EWC",
              "ipa_admin_surname": "IPAADMIN",
              "os_network_name": "private",
              "os_security_group_name": "ipa"
            }' \
          ipa-server-flavour.yml
        ```

        ## Inputs

        | Name | Description | Type | Default | Required |
        |------|-------------|------|---------|----------|
        | ipa_domain | domain name to be managed by the IPA server. Example: `eumetsat.sandbox.ewc` | `string` | n/a | yes |
        | ipa_server_hostname | hostname of the target vm where the IPA server will be installed. Example: `ipa-server-1` | `string`| n/a | yes |
        | ipa_admin_username | username of administrator account to replace the default IPA admin. Example: `ipaadmin` | `string` | n/a | yes |
        | ipa_admin_password | password of administrator account to replace the default IPA admin. Example: `my-secret-password` | `string` | n/a | yes |
        | ipa_admin_givenname | given name of the administrator to replace the default IPA admin (not necessarily a real person's name). Example: `EWC` | `string` | n/a | yes |
        | ipa_admin_surname | surname of the administrator to replace the default IPA admin (not necessarily a real person's name). Example: `IPAADMIN` | `string` | n/a | yes |
        | os_network_name | OpenStack network to which the target virtual machine has access to. Example: `private` | `string` | n/a | yes |
        | os_security_group_name | OpenStack security group containing all firewall rules required by the IPA server/client communication. Example: `ipa`  | `string` | n/a | yes |

        ## Dependencies
        > ⚠️ Only RockyLinux 9.5 and RockyLinux 8.10 VM images are currently supported.
        This is due to constrains imposed by the required ewc-ansible-role-ipa-server
        Ansible Role.

        > 💡 A VM plan with at least 4GB of RAM is recommended for successful setup and
        stable operation.

        | Name | Version | License | Home URL |
        |------|---------|------|------|
        | ewc-ansible-role-ipa-server | 1.0 |  MIT | https://github.com/ewcloud/ewc-ansible-role-ipa-server |

      home: https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning
      sources:
        - https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning/blob/1.0.0/playbooks/ipa-server-flavour/ipa-server-flavour.yml
      inputs:
        - name: ipa_domain
          description: "domain name to be managed by the IPA server. Example: eumetsat.sandbox.ewc"
          type: str
        - name: ipa_server_hostname
          description: "hostname of the target vm where the IPA server will be installed. Example: ipa-server-1"
          type: str
        - name: ipa_admin_username
          description: "username of administrator account to replace the default IPA admin. Example: ipaadmin"
          type: str
        - name: ipa_admin_password
          description: "password of administrator account to replace the default IPA admin. Example: my-secret-password"
          type: str
        - name: ipa_admin_givenname
          description: " 	given name of the administrator to replace the default IPA admin (not necessarily a real person's name). Example: EWC"
          type: str
        - name: ipa_admin_surname
          description: "surname of the administrator to replace the default IPA admin (not necessarily a real person's name). Example: IPAADMIN"
          type: str
        - name: os_network_name
          description: "OpenStack network to which the target virtual machine has access. Example: private"
          type: str
        - name: os_security_group_name
          description: "OpenStack security group containing all firewall rules required by the IPA server/client communication. Example: ipa"
          type: str
      _defaultSecurityGroups:
        - ldap
      maintainers:
        - name: EWC Team
          email: support@ewcloud.int
          url: https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/EWCLogo.png
      annotations:
        technology: "Ansible Playbook"
        category: "Security,Identity & Access Management,Deployable"
        supportLevel: "EWC-supported"
        licenseType: "MIT License"
      displayName: IPA server flavour
      summary: Turns an existing VM into a FreeIPA server, a central place for user authentication, authorization, and DNS-based resource discovery for secure and efficient identity management.
      license: https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning/blob/main/LICENSE
      published: true

    jupyterhub-flavour:
      name: "jupyterhub-flavour"
      version: "1.0.0"
      description: |
        Installs and run JupyterHub on your instance, offering a convenient way to access it through the web.

        The default Authenticator uses PAM (Pluggable Authentication Module) to authenticate system users with their usernames and passwords.
        With the default Authenticator, any user with an account and password on the system will be allowed to login.
        See also [here](https://jupyterhub.readthedocs.io/en/5.2.1/tutorial/getting-started/authenticators-users-basics.html)

        Therefore in order to login you need to use username/password from a local user existing in the machine. 
      home: https://github.com/ewcloud/ewc-flavours
      sources:
        - https://github.com/ewcloud/ewc-flavours/blob/main/playbooks/jupyterhub-flavour/jupyterhub-flavour.yml
      inputs:
        - name: jupyterhub_local_cert_email
          description: "Email used for the certificate."
          type: str
        - name: dns_domain
          description: "DNS domain. If not present, it will try to guess from instance configured hostname in /etc/hostname."
          type: str
        - name: jupyterhub_local_env_wipe
          default: false
          description: "Boolean to decide whether to wipe the environment if exists prior to a reinstallation"
          type: bool
        - name: jupyterhub_local_env_name
          default: "jupyterhub-local"
          description: "Name of the environment containing the Jupyerhub."
          type: str
        - name: jupyterhub_local_test_cert
          default: false
          description: "Use Lets encrypt test certificate."
          type: bool
        - name: jupyterhub_local_with_otp
          default: false
          description: "Use OTP authentication for Jupyterhub. It requires manual run of google-authenticator by the user to configure your TOTP device after running this playbook"
          type: bool
        - name: conda_prefix
          default: "/opt/conda"
          description: "Prefix where conda is installed."
          type: str
        - name: conda_user
          default: "root"
          description: "User owning the conda installation. "
          type: str
      _defaultSecurityGroups:
        - ssh-http-https
      maintainers:
        - name: EWC Team
          email: support@ewcloud.int
          url: https://github.com/ewcloud/ewc-flavours/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/jupyterprob.jpg
      annotations:
        technology: "Ansible Playbook"
        category: "Compute,Data Visualization,Data Processing"
        supportLevel: "EWC"
        licenseType: "Apache License 2.0"
      displayName: JupyterHub Flavour
      summary: It installs and run jupyterhub on your instance, offering a convenient way to access it through the web.
      license: https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning/blob/main/LICENSE
      published: false

    ml-basic:
      name: "ml-basic"
      version: "1.0.0"
      description: |
        Create a conda environment with the basic Machine Learning packages such as torch, xgboost, and scikit-learn. Check `files/env.yml` for all the details on the software included.

        Requirements
        ------------
        This ansible role depends on ewc-ansible-role-conda

        Role Variables
        --------------
        - `ml_basic_env_wipe`: Boolean to decide whether to wipe the environment if exists prior to a reinstallation. Default: no
        - `ml_basic_env_name`: Name of the environment containing the software stack. Default: ml-basic
        - `ml_basic_env_path`: Path to the environment containing the software stack. Default: `{{ conda_prefix }}/envs/{{ ml_basic_env_name }}`
        - `ml_basic_create_ipykernel`: Boolean to create a system-wide kernel available. Default: yes
        - `conda_prefix`: Prefix where conda is installed. Default: `/opt/conda`
        - `conda_user`: User owning the conda installation. Default: `root`

        Example Playbook
        ----------------

            - hosts: all
              roles:
                -  ewc-ansible-role-ml-basic

        License
        -------

        Apache 2.0.

        Author Information
        ------------------

        ECMWF for the European Weather Cloud
        
        <img src="https://climate.copernicus.eu/sites/default/files/inline-images/ECMWF.png"  width="120px" height="120px"> 
        
        ![ewc logo](https://europeanweather.cloud/sites/default/files/images/cloud-data-network-SW-v3.png){width=120px  height=120px}

      home: https://github.com/ewcloud/ewc-ecmwf-ai-stacks
      sources:
        - https://github.com/ewcloud/ewc-ecmwf-ai-stacks/blob/main/ml-basic.yml
      maintainers:
        - name: EWC Team
          email: support@ewcloud.int
          url: https://github.com/ewcloud/ewc-ecmwf-ai-stacks/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/EWCLogo.png
      annotations:
        technology: "Ansible Playbook"
        category: "Machine Learning & AI, GPU-accelerated"
        supportLevel: "EWC"
        licenseType: "Apache License 2.0"
      displayName: ML Basic
      summary: It features an environment with the main machine learning packages like scikit-learn or torch.
      license: https://github.com/ewcloud/ewc-ecmwf-ai-stacks/blob/main/LICENSE
      published: false

    nwcsaf-datacube-xarray:
      name: "nwcsaf-datacube-xarray"
      version: "1.0.0"
      description: |
        Jupyter notebooks on using Icechunk, Virtualizar, and Kerchunk to enable Single-Point Access to Distributed Cloud Files through xarray.
      home: https://gitlab.aemet.es/jllisov/vzarr
      sources:
        - https://gitlab.aemet.es/jllisov/vzarr
      maintainers:
        - name: NWCSAF
          email: jllisov@aemet.es
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/NWCSAFLogo.png
      annotations:
        technology: "Jupyter Notebook"
        category: "Training,Data Access"
        supportLevel: "Community"
        licenseType: "MIT"
      displayName: NWCSAF Datacube Xarray
      summary: Jupyter Notebooks for Unlocking Large Datasets on Cloud-Native Data Workflows.
      license: https://gitlab.aemet.es/jllisov/vzarr/-/blob/main/LICENSE
      published: true

    openstack-compute:
      name: "openstack-compute"
      version: "1.0.0"
      description: |
        Pre-configured instance for deploying and managing OpenStack compute resources using Terraform.
      home: https://github.com/ewcloud/openstack-compute
      sources:
        - https://github.com/ewcloud/openstack-compute
      maintainers:
        - name: EWC Team
          email: support@ewcloud.int
          url: https://github.com/ewcloud/openstack-compute/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/EWCLogo.png
      annotations:
        technology: "Terraform Module"
        category: "Compute"
        supportLevel: "EWC"
        licenseType: "MIT License"
      displayName: Openstack Compute
      summary: Pre-configured instance for deploying and managing OpenStack compute resources using Terraform.
      license: https://github.com/ewcloud/openstack-compute/blob/main/LICENSE
      published: false

    pytroll:
      name: "pytroll"
      version: "1.0.0"
      description: |
        Playbooks to install pytroll processing and wms in the EWC
      home: https://github.com/nordsat/ewc-playbooks
      sources:
        - https://github.com/nordsat/ewc-playbooks/blob/main/satellite-data-processing-main.yaml
      maintainers:
        - name: NORDSAT
          url: https://github.com/nordsat/ewc-playbooks/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/pytrollLogo.png
      annotations:
        technology: "Ansible Playbook"
        category: "Compute,Data Processing"
        supportLevel: "Community"
        licenseType: "GNU General Public License v3.0"
      displayName: Pytroll Processing
      summary: Playbooks to install pytroll processing and wms in the EWC.
      license: https://github.com/nordsat/ewc-playbooks/blob/main/LICENSE
      published: false

    remote-desktop-flavour:
      name: "remote-desktop-flavour"
      version: "1.0.0"
      description: |
        This Ansible Playbook configures virtual machines within the
        [European Weather Cloud (EWC)](https://europeanweather.cloud/) to
        operate as a remote desktops, courtesy of [X2Go](https://wiki.x2go.org/doku.php).

        X2Go enables secure, graphical access to a desktop environment over low
        or high bandwidth connections, providing a seamless user experience for
        remote work. This template equips your VM with utility software you
        would expect to see in a typical and stable Linux distribution, ideal
        efficient and intuitive desktop operation.

        Special for tenant users needing remote graphical access in their EWC
        environment, this template simplifies the setup of basic cloud development
        solution. Follow the [instructions below](#usage) to get started.

        ## Functionality
        The template is designed to:
        - Configure a pre-existing Rocky Linux virtual machine (minimum 4GB RAM recommended) with
        the [MATE desktop environment](https://mate-desktop.org/).
        - Install and set up X2Go for secure remote desktop access over varying network conditions.
        - Enable end-users to interact with the VM through a graphical interface using the X2Go client
        application.

        ## Prerequisites
        >💡 Versions listed correspond to minimal prerequisites.

        To successfully run this playbook, the following packages should be available in your work environment:

        | Name | Version | License | Home URL |
        |------|---------|----- |-----|
        | git | 2.0 | GPLv2  | https://git-scm.com/downloads |
        | python | 3.9   | PSF | https://www.python.org/downloads  |
        | ansible | 2.15 |  GPLv3+ | https://pypi.org/project/ansible  |

        ## Usage

        ### 1. Download  Ansible dependencies
        >💡 By default, Ansible Roles are installed under the `~/.ansible/roles` directory within your working environment.

        Download the correct version of the Ansible dependencies, if you haven't done so already:

        ```
        ansible-galaxy role install -r requirements.yml
        ```

        ### 2. Specify the target host and SSH credentials
        Create an inventory file to specify address/credentials that Ansible should use
        to reach the virtual machine you wish to configure:

        ```yaml
        # inventory.yml
        ---
        ewcloud:
          hosts:
            remote_desktop:
              ansible_python_interpreter: /usr/bin/python3
              ansible_host: <add the IPV4 address of the target host>
              ansible_ssh_private_key_file: <add the path to local SSH private key file>
              ansible_user: cloud-user
              ansible_ssh_common_args: -o StrictHostKeyChecking=accept-new

        ```

        ### 3. Configure and apply the template

        #### 3.1. Interactive Mode

        By running the following command, you can trigger an interactive session that
        prompts you for the necessary user inputs, and then applies changes to your
        target EWC environment:

        ```bash
        ansible-playbook -i inventory.yml remote-desktop-flavour.yml
        ```

        #### 3.2. Non-Interactive Mode

        >💡 To learn more about defining variables at runtime, checkout the
        [official Ansible documentation](https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_variables.html).

        You can also run in non-interactive mode by passing the
        `--extra-vars` or `-e` flag, followed by a map of  key-value pairs; one for
        each and every available input (see [inputs section](#inputs) below). For
        example:

        ```bash
        ansible-playbook \
          -i inventory.yml \
          -e '{"whitelisted_ip_ranges": ["10.0.0.0/24"]}' \
          remote-desktop-flavour.yml
        ```

        ### 4. Install the local client and connect to your remote desktop
        >⚠️ When configuring a connection, be sure to select "MATE" (instead of
        "KDE" or any other options) in the `Session Type` drop-down list, towards the
        bottom of the `Session` tab. This is required for the local client to correctly
        communicate with your remote desktop.

        Install the remote desktop client on Microsoft Window, Mac OS or Linux by
        following the links on the [official X2Go installation page](https://wiki.x2go.org/doku.php/doc:installation:x2goclient). Then follow the [official X2Go client usage page](https://wiki.x2go.org/doku.php/doc:usage:x2goclient)
        if you do not know how to configure a new session.

        For a session creation
        example, representative of a typical EWC environment, checkout the Remote
        Desktop section of
        [this official EWC documentation page](https://confluence.ecmwf.int/display/EWCLOUDKB/EUMETSAT+tenancy%3A+Default+setup).

        ## Inputs

        | Name | Description | Type | Default | Required |
        |------|-------------|------|---------|----------|
        | whitelisted_ip_ranges | IPv4 ranges (in CIDR format) to be whitelisted in Fail2ban configuration. When in doubt, do not set. Example: `['10.0.0.0/24','192.168.1.0/24']` | `list(string)` | n/a | no |


        ## Dependencies

        > ⚠️ Only RockyLinux 8.10 instances are currently supported due
        to constrains imposed by the required ewc-ansible-role-remote-desktop Ansible
        Role.

        > 💡 A VM plan with at least 4GB of RAM is recommended for successful setup and
        stable operation.

        | Name | Version | License |Home URL |
        |------|---------|-------|---|
        | ewc-ansible-role-remote-desktop | 1.0 | MIT |  https://github.com/ewcloud/ewc-ansible-role-remote-desktop |

      home: https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning
      sources:
        - https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning/blob/1.0.0/playbooks/remote-desktop-flavour/remote-desktop-flavour.yml
      inputs:
        - name: whitelisted_ip_ranges
          description: "IPv4 ranges (in CIDR format) to be whitelisted in Fail2ban configuration. When in doubt, do not set. Example: ['10.0.0.0/24','192.168.1.0/24']"
          type: List[str]
          default: None
      maintainers:
        - name: EWC Team
          email: support@ewcloud.int
          url: https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/EWCLogo.png
      annotations:
        technology: "Ansible Playbook"
        category: "Remote Access & Desktop,Deployable"
        supportLevel: "EWC-supported"
        licenseType: "MIT License"
      displayName: Remote desktop flavour
      summary: Transforms an existing VM into a secure, graphical desktop environment using X2Go and MATE, enabling simple remote access and intuitive cloud-based development for tenant users.
      license: https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning/blob/main/LICENSE
      published: true
    
    ssh-bastion-flavour:
      name: "ssh-bastion-flavour"
      version: "1.0.0"
      description: |
        The [SSH](https://en.wikipedia.org/wiki/Secure_Shell) bastion or proxy server
        is a barrier between your internal machines (which lack a public or floating IP
        address) and the public internet. With the SSH proxy, you'll have an extra layer of
        security on top of your instances. It's equipped with
        [Fail2ban](https://github.com/fail2ban/fail2ban),
        intrusion prevention software designed to prevent brute-force attacks.

        This template is for tenant admins wishing to hardening the way tenant users
        connect to the [European Weather Cloud (EWC)](https://europeanweather.cloud/),
        as well as tenant users whom are mindful about safe-keeping the compute resources
        or data withing their work environments.

        ## Functionality
        The template is designed to:

        * Configure a pre-existing virtual machine running RockyLinux, with public IP
        address, and a minimum recommended 4GB of RAM, as entrypoint for users who
        wish to reach private EWC networks, from the public internet, via SSH.

        ## Prerequisites
        >💡 Versions listed correspond to minimal prerequisites.

        To successfully run this playbook, the following packages should be available in your work environment:

        | Name | Version | License | Home URL |
        |------|---------|----- |-----|
        | git | 2.0 | GPLv2  | https://git-scm.com/downloads |
        | python | 3.9   | PSF | https://www.python.org/downloads  |
        | ansible | 2.15 |  GPLv3+ | https://pypi.org/project/ansible  |

        ## Usage

        ### 1. Download  Ansible dependencies
        >💡 By default, Ansible Roles are installed under the `~/.ansible/roles` directory within your working environment.

        Download the correct version of the Ansible dependencies, if you haven't done so already:

        ```
        ansible-galaxy role install -r requirements.yml
        ```

        ### 2. Specify the target host and SSH credentials
        Create an inventory file to specify address/credentials that Ansible should use
        to reach the virtual machine you wish to configure:

        ```yaml
        # inventory.yml
        ---
        ewcloud:
          hosts:
            ssh_bastion:
              ansible_python_interpreter: /usr/bin/python3
              ansible_host: <add the IPV4 address of the target host>
              ansible_ssh_private_key_file: <add the path to local SSH private key file>
              ansible_user: cloud-user
              ansible_ssh_common_args: -o StrictHostKeyChecking=accept-new
        ```

        ### 3. Configure and apply the template

        #### 3.1. Interactive Mode

        By running the following command, you can trigger an interactive session that
        prompts you for the necessary user inputs, and then applies changes to your
        target EWC environment:

        ```bash
        ansible-playbook -i inventory.yml ssh-bastion-flavour.yml
        ```

        #### 3.2. Non-Interactive Mode

        >💡 To learn more about defining variables at runtime, checkout the
        [official Ansible documentation](https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_variables.html).

        You can also run in non-interactive mode by passing the
        `--extra-vars` or `-e` flag, followed by a map of  key-value pairs; one for
        each and every available input (see [inputs section](#inputs) below). For
        example:

        ```bash
        ansible-playbook \
          -i inventory.yml \
          -e '{"whitelisted_ip_ranges": ["10.0.0.0/24"]}' \
          ssh-bastion-flavour.yml
        ```

        ## Inputs

        | Name | Description | Type | Default | Required |
        |------|-------------|------|---------|----------|
        | whitelisted_ip_ranges | IPv4 ranges (in CIDR format) to be whitelisted in Fail2ban configuration. When in doubt, do not set. Example: `['10.0.0.0/24','192.168.1.0/24']` | `list(string)` | n/a | no |

        ## Dependencies

        > ⚠️ Only RockyLinux 9.5 and RockyLinux 8.10 instances are currently supported due
        to constrains imposed by the required ewc-ansible-role-ssh-bastion Ansible
        Role.

        > 💡 A VM plan with at least 4GB of RAM is recommended for successful setup and
        stable operation.

        | Name | Version | License |Home URL |
        |------|---------|-------|-------|
        | ewc-ansible-role-ssh-bastion | 1.3 | MIT | https://github.com/ewcloud/ewc-ansible-role-ssh-bastion |
      home: https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning
      sources:
        - https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning/blob/1.0.0/playbooks/ssh-bastion-flavour/ssh-bastion-flavour.yml
      inputs:
        - name: whitelisted_ip_ranges
          description: "IPv4 ranges (in CIDR format) to be whitelisted in Fail2ban configuration. When in doubt, do not set. Example: ['10.0.0.0/24','192.168.1.0/24']"
          type: List[str]
          default: None
      maintainers:
        - name: EWC Team
          email: support@ewcloud.int
          url: https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/EWCLogo.png
      annotations:
        technology: "Ansible Playbook"
        category: "Remote Access & Desktop,Deployable"
        supportLevel: "EWC-supported"
        licenseType: "MIT License"
      displayName: SSH bastion flavour
      summary: Tightens the configuration of a running VM, to operate as a secure SSH proxy with Fail2ban, providing tenant admins and users a fortified entry point to safely access private EWC networks from the public internet.
      license: https://github.com/ewcloud/ewc-ansible-playbook-flavours-and-provisioning/blob/main/LICENSE
      published: true
