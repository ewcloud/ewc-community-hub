apiVersion: communityhub.europeanweather.cloud/v1alpha1
kind: CommunityHubCatalog
spec:
  items:
    ai-models:
      name: "ai-models"
      version: "0.9.0"
      description: |
        Create a conda environment with the ai-models package and associated plugins to run a set of data-driven weather forecasting models such as panguweather or graphcast. 

        Requirements
        ------------
        This ansible role depends on ewc-ansible-role-conda.

        Role Variables
        --------------
        - `ai_models_env_wipe`: Boolean to decide whether to wipe the environment if exists prior to a reinstallation. Default: no
        - `ai_models_env_name`: Name of the environment containing the software stack. Default: ml-basic
        - `ai_models_env_path`: Path to the environment containing the software stack. Default: `{{ conda_prefix }}/envs/{{ ai_models_env_name }}`
        - `ai_models_create_ipykernel`: Boolean to create a system-wide kernel available. Default: yes
        - `conda_prefix`: Prefix where conda is installed. Default: `/opt/conda`
        - `conda_user`: User owning the conda installation. Default: `root`

        Example Playbook
        ----------------

            - hosts: all
              roles:
                -  ewc-ansible-role-ai-models

        License
        -------

        Apache 2.0.

        Author Information
        ------------------

        ECMWF for the European Weather Cloud
        
        <img src="https://climate.copernicus.eu/sites/default/files/inline-images/ECMWF.png"  width="120px" height="120px"> 
        
        ![ewc logo](https://europeanweather.cloud/sites/default/files/images/cloud-data-network-SW-v3.png){width=120px  height=120px}

      home: https://github.com/ewcloud/ewc-ecmwf-ai-stacks
      sources:
        - https://github.com/ewcloud/ewc-ecmwf-ai-stacks/blob/main/ai-models.yml
      maintainers:
        - name: EWC Team
          email: support@ewcloud.int
          url: https://github.com/ewcloud/ewc-ecmwf-ai-stacks/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/EWCLogo.png
      annotations:
        technology: "Ansible Playbook"
        category: "Machine Learning & AI, GPU-accelerated"
        supportLevel: "EWC"
        licenseType: "Apache License 2.0"
      displayName: AI Models
      summary: It features the most popular data driven forecast models such as Pangu Weather, Fourcastnet or graphcast.
      license: https://github.com/ewcloud/ewc-ecmwf-ai-stacks/blob/main/LICENSE
      published: true
    ecmwf-aifs-single-mse:
      name: "ecmwf-aifs-single-mse"
      version: "1.0.0"
      description: |
        Create a conda environment with AIFS Single MSE and associated software stack.

        Requirements
        ------------

        This ansible role depends on ewc-ansible-role-conda and needs to be applied on a GPU-powered instance.

        Role Variables
        --------------

        - `aifs_single_mse_env_wipe`: Boolean to decide whether to wipe the environment if exists prior to a reinstallation. Default: no
        - `aifs_single_mse_env_name`: Name of the environment containing the software stack. Default: aifs-single-mse
        - `aifs_single_mse_env_path`: Installation path for the environment. Default: "{{ conda_prefix }}/envs/{{ aifs_single_mse_env_name }}"
        - `aifs_single_mse_checkpoint`: URL to the model checkpoint. Default: https://huggingface.co/ecmwf/aifs-single-1.0/resolve/main/aifs-single-mse-1.0.ckpt
        - `aifs_single_mse_create_ipykernel`: Create the jupyter kernel for this environment. Default: yes
        - `conda_prefix`: Prefix where conda is installed. Default: `/opt/conda`
        - `conda_user`: User owning the conda installation. Default: `root`

        Example Playbook
        ----------------

            - hosts: all
              roles:
                -  ewc-ansible-role-aifs-single-mse

        License
        -------

        Apache 2.0.

        Author Information
        ------------------

        ECMWF for the European Weather Cloud
        
        <img src="https://climate.copernicus.eu/sites/default/files/inline-images/ECMWF.png"  width="120px" height="120px"> 
        
        ![ewc logo](https://europeanweather.cloud/sites/default/files/images/cloud-data-network-SW-v3.png){width=120px  height=120px}

      home: https://github.com/ewcloud/ewc-ecmwf-ai-stacks
      sources:
        - https://github.com/ewcloud/ewc-ecmwf-ai-stacks/blob/main/aifs-single-mse.yml
      maintainers:
        - name: EWC Team
          email: support@ewcloud.int
          url: https://github.com/ewcloud/ewc-ecmwf-ai-stacks/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/EWCLogo.png
      annotations:
        technology: "Ansible Playbook"
        category: "Machine Learning & AI, GPU-accelerated"
        supportLevel: "EWC"
        licenseType: "Apache License 2.0"
      displayName: ECMWF AIFS Single MSE
      summary: It features the ECMWF AIFS Single data-driven model
      license: https://github.com/ewcloud/ewc-ecmwf-ai-stacks/blob/main/LICENSE
      published: true
    ecmwf-anemoi:
      name: "ecmwf-anemoi"
      version: "1.0.0"
      description: |
        Create a conda environment with the Anemoi framework for weather forecasting based on machine learning and associated software stack.
        
        Requirements
        ------------

        This ansible role depends on ewc-ansible-role-conda and needs to be applied on a GPU-powered instance if training or inference are used.

        Role Variables
        --------------

        - `anemoi_env_wipe`: Boolean to decide whether to wipe the environment if exists prior to a reinstallation. Default: no
        - `anemoi_env_name`: Name of the environment containing the software stack. Default: aifs-single-mse
        - `anemoi_env_path`: Installation path for the environment. Default: "{{ conda_prefix }}/envs/{{ anemoi_env_name }}"
        - `anemoi_create_ipykernel`: Create the jupyter kernel for this environment. Default: yes
        - `conda_prefix`: Prefix where conda is installed. Default: `/opt/conda`
        - `conda_user`: User owning the conda installation. Default: `root`

        Example Playbook
        ----------------

            - hosts: all
              roles:
                -  ewc-ansible-role-anemoi

        License
        -------

        Apache 2.0.

        Author Information
        ------------------

        ECMWF for the European Weather Cloud
        
        <img src="https://climate.copernicus.eu/sites/default/files/inline-images/ECMWF.png"  width="120px" height="120px"> 
        
        ![ewc logo](https://europeanweather.cloud/sites/default/files/images/cloud-data-network-SW-v3.png){width=120px  height=120px}

      home: https://github.com/ewcloud/ewc-ecmwf-ai-stacks
      sources:
        - https://github.com/ewcloud/ewc-ecmwf-ai-stacks/blob/main/anemoi.yml
      maintainers:
        - name: EWC Team
          email: support@ewcloud.int
          url: https://github.com/ewcloud/ewc-ecmwf-ai-stacks/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/EWCLogo.png
      annotations:
        technology: "Ansible Playbook"
        category: "Machine Learning & AI, GPU-accelerated"
        supportLevel: "EWC"
        licenseType: "Apache License 2.0"
      displayName: ECMWF Anemoi
      summary: It leverages the Anemoi framework to develop and run your AI-models or manage datasets.
      license: https://github.com/ewcloud/ewc-ecmwf-ai-stacks/blob/main/LICENSE
      published: true
    ecmwf-data-flavour:
      name: "ecmwf-data-flavour"
      version: "1.0.0"
      description: |
        Includes the basic ECMWF software stack, with MARS client and an environment with `ecCodes`, `Metview`, `Earthkit` and `Aviso`.
        
        Getting started
        ---------------
        
        * Clone or download the code from the source repository.
        * Install ansible and other dependencies. You may want to do it in its own virtual environment (`pip install -r requirements.txt`)
        * Fetch the external requirements
          ```bash
          $ ansible-galaxy role install -r requirements.yml roles/
          ```
        
        * Define your inventory in `inventory`
        * Run the apropriate playbook 
        
          ```bash
          $ ansible-playbook -i inventory ecmwf-data-flavour.yml
          ```

        You may use the following ansible variables to customise this playbook:
        
        | Variable | Description | Type | Default | Required |
        |------|-------------|------|---------|----------|
        | reboot_if_required | Reboot the instance if required after an update. | `boolean`| `true` | no |
        | ecmwf_toolbox_env_wipe | Decide whether to wipe the environment if exists prior to a reinstallation. | `boolean` | `no` | no |
        | ecmwf_toolbox_env_wipe | Name of the environment containing the ECMWF toolbox. | `string` | `ecmwf-toolbox` | no |
        | ecmwf_toolbox_create_ipykernel | Create a system-wide kernel available. | `boolean` | yes | no |
        | conda_prefix | Prefix where conda is installed. | `string` | `/opt/conda` | no |
        | conda_user | User owning the conda installation. | `string` | `root` | no |
      
        Example usage:
      
        ```bash
        ansible-playbook -i inventory ecmwf-data-flavour.yml
        ```
        
        Author
        ------------------
        ECMWF for the European Weather Cloud
        
        <img src="https://climate.copernicus.eu/sites/default/files/inline-images/ECMWF.png"  width="120px" height="120px"> 
        
        ![ewc logo](https://europeanweather.cloud/sites/default/files/images/cloud-data-network-SW-v3.png){width=120px  height=120px}

      home: https://github.com/ewcloud/ewc-flavours
      sources:
        - https://github.com/ewcloud/ewc-flavours/blob/766090d57b3ad18d89f999e0601cb1fdf1e14eda/ecmwf-data-flavour.yml
      maintainers:
        - name: EWC Team
          email: support@ewcloud.int
          url: https://github.com/ewcloud/ewc-flavours/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/EWCLogo.png
      annotations:
        technology: "Ansible Playbook"
        category: "Compute,Data Access"
        supportLevel: "EWC"
        licenseType: "Apache License 2.0"
      displayName: ECMWF Data Flavour
      summary: It includes the basic ECMWF software stack, with MARS client and an environment with `ecCodes`, `Metview`, `Earthkit` and `Aviso`.
      license: https://github.com/ewcloud/ewc-flavours/blob/main/LICENSE
      published: true
    ecmwf-data-flavour-2.0.0:
      name: "ecmwf-data-flavour"
      version: "2.0.0"
      description: |
        Includes the basic ECMWF software stack, with MARS client and an environment with `ecCodes`, `Metview`, `Earthkit` and `Aviso`.
        
        Getting started
        ---------------
        
        * Clone or download the code from the source repository.
        * Install ansible and other dependencies. You may want to do it in its own virtual environment (`pip install -r requirements.txt`)
        * Fetch the external requirements
          ```bash
          $ ansible-galaxy role install -r requirements.yml roles/
          ```
        
        * Define your inventory in `inventory`
        * Run the apropriate playbook 
        
          ```bash
          $ ansible-playbook -i inventory ecmwf-data-flavour.yml
          ```

        You may use the following ansible variables to customise this playbook:
        
        | Variable | Description | Type | Default | Required |
        |------|-------------|------|---------|----------|
        | reboot_if_required | Reboot the instance if required after an update. | `boolean`| `true` | no |
        | ecmwf_toolbox_env_wipe | Decide whether to wipe the environment if exists prior to a reinstallation. | `boolean` | `no` | no |
        | ecmwf_toolbox_env_wipe | Name of the environment containing the ECMWF toolbox. | `string` | `ecmwf-toolbox` | no |
        | ecmwf_toolbox_create_ipykernel | Create a system-wide kernel available. | `boolean` | yes | no |
        | conda_prefix | Prefix where conda is installed. | `string` | `/opt/conda` | no |
        | conda_user | User owning the conda installation. | `string` | `root` | no |
      
        Example usage:
      
        ```bash
        ansible-playbook -i inventory ecmwf-data-flavour.yml
        ```
        
        Author
        ------------------
        ECMWF for the European Weather Cloud
        
        <img src="https://climate.copernicus.eu/sites/default/files/inline-images/ECMWF.png"  width="120px" height="120px"> 
        
        ![ewc logo](https://europeanweather.cloud/sites/default/files/images/cloud-data-network-SW-v3.png){width=120px  height=120px}

      home: https://github.com/ewcloud/ewc-flavours
      sources:
        - https://github.com/ewcloud/ewc-flavours/blob/766090d57b3ad18d89f999e0601cb1fdf1e14eda/ecmwf-data-flavour.yml
      maintainers:
        - name: EWC Team
          email: support@ewcloud.int
          url: https://github.com/ewcloud/ewc-flavours/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/EWCLogo.png
      annotations:
        technology: "Ansible Playbook"
        category: "Compute,Data Access"
        supportLevel: "EWC"
        licenseType: "Apache License 2.0"
      displayName: ECMWF Data Flavour
      summary: It includes the basic ECMWF software stack, with MARS client and an environment with `ecCodes`, `Metview`, `Earthkit` and `Aviso`.
      license: https://github.com/ewcloud/ewc-flavours/blob/main/LICENSE
      published: true
    eumetcast-terrestrial:
      name: "eumetcast-terrestrial"
      version: "1.0.0"
      description: |
        Service for receiving and processing EUMETCast Terrestrial data streams via IP multicast within a private network.
      home: https://github.com/ewcloud/ewc-flavours
      sources:
        - https://github.com/ewcloud/ewc-flavours/blob/main/eumetcast-terrestrial.yml
      maintainers:
        - name: EWC Team
          email: support@ewcloud.int
          url: https://github.com/ewcloud/ewc-flavours/issues
        - name: EWC Support Team
          email: testemail@ewcloud.int
          url: https://github.com/ewcloud/ewc-flavours/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/EWCLogo.png
      annotations:
        technology: "Ansible Playbook"
        category: "Networking,Data Reception"
        supportLevel: "EWC"
        licenseType: "MIT License"
        others: "Earth Observation,Eumetcast Terrestrial"
      displayName: EUMETCast Terrestrial
      summary: Service for receiving and processing EUMETCast Terrestrial data streams via IP multicast within a private network.
      license: https://github.com/ewcloud/ewc-flavours/blob/main/LICENSE
      published: true
    eumetsat-data-tailor:
      name: "eumetsat-data-tailor"
      version: "1.0.0"
      description: |
        On-demand data processing service for subsetting, reformatting, and customising Earth observation data products.
      home: https://github.com/ewcloud/ewc-flavours
      sources:
        - https://github.com/ewcloud/ewc-flavours/blob/main/data-tailor.yml
      maintainers:
        - name: EWC Team
          email: support@ewcloud.int
          url: https://github.com/ewcloud/ewc-flavours/issues
        - name: EWC Support Team
          email: testemail@ewcloud.int
          url: https://github.com/ewcloud/ewc-flavours/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/EWCLogo.png
      annotations:
        technology: "Ansible Playbook"
        category: "Data Processing"
        supportLevel: "EWC"
        licenseType: "MIT License"
        others: "Earth Observation,Fire monitoring"
      displayName: EUMETSAT Data Tailor
      summary: On-demand data processing service for subsetting, reformatting, and customising Earth observation data products.
      license: https://github.com/ewcloud/ewc-flavours/blob/main/LICENSE
      published: false
    ewc-ansible-role-ssh-bastion:
      name: "ewc-ansible-role-ssh-bastion"
      version: "1.0.0"
      description: |
        This repository contains a configuration template 
        (i.e. an [Ansible Role](https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_reuse_roles.html)) 
        to customize your environment in the
        [European Weather Cloud (EWC)](https://europeanweather.cloud/).
        The template is designed to:
        * Configure pre-existing RockyLinux 8 or RockyLinux 9 virtual machines (with 
        public IP address), as entrypoint for users who wish to reach private
        EWC networks from the public internet via SSH.
        
        ## Usage
        
        The step-by-step described below assume your local file system follows the 
        example structure below, with `ewc-ansible-role-ssh-bastion` being a clone of this
        repository:
        ```
        .
        ├── ewc-ansible-role-ssh-bastion
        ├── inventory.yml
        └── playbook.yml
        ```
        
        ### 1. Specify the target host and SSH credentials
        Create an inventory file to specify address/credentials that Ansible should use
        to reach the virtual machine you wish to configure:
        ```yaml
        # inventory.yml
        ---
        ewcloud:
          hosts:
            ssh_bastion:
              ansible_python_interpreter: /usr/bin/bython3
              ansible_host: <add the IPV4 address of the target host>
              ansible_ssh_private_key_file: <add the path to local SSH RSA private key file>
              ansible_user: <add the username which owns the SSH RSA private key >
        ```
        ### 2. Customize the template
        
        Edit input values for the template [variables](./vars/main.yml) as needed (see
        [Inputs](#inputs) section for details).
        Then, proceed to create an Ansible Playbook file to load your customizations: 
        
        ```yaml
        # playbook.yml
        ---
        - name: SSH Bastion Library Item Automation Script
          hosts: ssh_bastion
          become: true
          become_user: root
          become_method: ansible.builtin.sudo
        
          roles:
            - ewc-ansible-role-ssh-bastion
        ```
        
        ### 3. Apply the template
        
        
        You can apply changes on the target host by running:
        ```bash
        ansible-playbook -i inventory.yml playbook.yml
        ```
        
        ## Inputs
        
        | Name | Description | Type | Default | Required |
        |------|-------------|------|---------|:--------:|
        | localhost_ip_ranges | Localhost IP range (in CIDR format) to be whitelisted by Fail2ban | `string` | `"127.0.0.1/8"` | yes |
        | private_ip_ranges | Private IP range or ranges (in CIDR format) to be whitelisted by Fail2ban | `string` | n/a | no |
        | public_ip_ranges | Public IP range or ranges (in CIDR format) to be whitelisted by Fail2ban | `string` | n/a | no |

      home: https://github.com/ewcloud/ewc-ansible-role-ssh-bastion
      sources:
        - https://github.com/ewcloud/ewc-ansible-role-ssh-bastion/blob/main
      maintainers:
        - name: EWC Team
          email: support@ewcloud.int
          url: https://github.com/ewcloud/ewc-ansible-role-ssh-bastion/issues
        - name: EWC Support Team
          email: support@europeanweather.cloud
          url: http://support.europeanweather.cloud/
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/EWCLogo.png
      annotations:
        technology: "Ansible Role"
        category: "Networking,Security,Access Management"
        supportLevel: "EWC"
        licenseType: "MIT License"
      displayName: EWC Ansible Role SSH Bastion
      summary: Create secure SSH Bastion host providing controlled, audited access to private network resources.
      license: https://github.com/ewcloud/ewc-flavours/blob/main/LICENSE
      published: false
    ipa-client-enroll:
      name: "ipa-client-enroll"
      version: "1.0.0"
      description: |
        IPA CLient Enroll.
      home: https://github.com/ewcloud/ewc-flavours
      sources:
        - https://github.com/ewcloud/ewc-flavours/blob/main/ipa-client-enroll.yml
      inputs:
        - name: password_allowed_ip_ranges
          description: "IP ranges (in CIDR format) to be allowed for password access in SSHD configuration."
          type: List[str]
        - name: ipa_client_hostname
          description: "IP ranges (in CIDR format) to be allowed for password access in SSHD configuration."
          type: str
        - name: ipa_domain
          description: "The IPA domain name. Example: <memberstate>-<organization>-<projectname>.ewc"
          type: str
        - name: ipa_admin_password
          description: "The IPA Directory Manager/Admin password (at least 8 characters long)"
          type: str
        - name: ipa_admin_username
          description: "Username of administrator account to replace the default IPA admin"
          type: str
        - name: ipa_server_hostname
          description: "IPA server host name. Example: ldap"
          type: str
      maintainers:
        - name: EWC Team
          email: support@ewcloud.int
          url: https://github.com/ewcloud/ewc-flavours/issues
        - name: EWC Support Team
          email: testemail@ewcloud.int
          url: https://github.com/ewcloud/ewc-flavours/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/EWC%20-%20Emblem%20color.png
      annotations:
        technology: "Ansible Playbook"
        category: "User Management"
        supportLevel: "EWC"
        licenseType: "Apache License 2.0"
      displayName: IPA Client Enroll
      summary: IPA CLient Enroll.
      license: https://github.com/ewcloud/ewc-flavours/blob/main/LICENSE
      published: true
    ipa-client-disenroll:
      name: "ipa-client-disenroll"
      version: "1.0.0"
      description: |
        IPA CLient Disenroll.
      home: https://github.com/ewcloud/ewc-flavours
      sources:
        - https://github.com/ewcloud/ewc-flavours/blob/main/ipa-client-disenroll.yml
      inputs:
        - name: ipa_client_hostname_override
          description: "hostname of the target vm to be disenrolled from the IPA server. Example: <openstack instance name>"
          type: str
        - name: ipa_domain_override
          description: "Domain name managed by the IPA server. Example: <memberstate>-<organization>-<projectname>.ewc"
          type: str
        - name: ipa_server_hostname_override
          description: "The IPA Directory Manager/Admin password (at least 8 characters long)"
          type: str
        - name: ipa_admin_username_override
          description: "Username of administrator account to replace the default IPA admin"
          type: str
        - name: ipa_server_hostname_override
          description: "IPA server host name. Example: ldap"
          type: str
      maintainers:
        - name: EWC Team
          email: support@ewcloud.int
          url: https://github.com/ewcloud/ewc-flavours/issues
        - name: EWC Support Team
          email: testemail@ewcloud.int
          url: https://github.com/ewcloud/ewc-flavours/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/EWC%20-%20Emblem%20color.png
      annotations:
        technology: "Ansible Playbook"
        category: "User Management"
        supportLevel: "EWC"
        licenseType: "Apache License 2.0"
      displayName: IPA CLient Disenroll
      summary: IPA CLient Disenroll.
      license: https://github.com/ewcloud/ewc-flavours/blob/main/LICENSE
      published: false
    ipa-server:
      name: "ipa-server"
      version: "1.0.0"
      description: |
        Centralized identity, authentication, and access management solution based on FreeIPA.
      home: https://github.com/ewcloud/ewc-flavours
      sources:
        - https://github.com/ewcloud/ewc-flavours/blob/main/ipa-server.yml
      inputs:
        - name: ipa_domain_override
          description: "Domain name to be managed by the IPA server. Example: <memberstate>-<organization>-<projectname>.ewc"
          type: str
        - name: ipa_server_hostname_override
          description: "Hostname of the target VM where the IPA server will be installed. Example: ipa-server-1"
          type: str
        - name: ipa_admin_username_override
          description: "Username of administrator account to replace the default IPA admin"
          type: str
        - name: ipa_admin_password_override
          description: "Password of administrator account to replace the default IPA admin"
          type: str
        - name: os_network_name_override
          description: "OpenStack network to which the target virtual machine has access. Example: private"
          type: str
        - name: os_subnet_name_override
          description: "OpenStack subnet in which the target virtual machine is running. Example: private subnet"
          type: str
        - name: os_subnet_cidr_override
          description: "IP range (in CIDR format) that spans the OpenStack subnet in which the target virtual machine is running. Example: 10.0.0.0/24"
          type: str
        - name: os_security_group_name_override
          default: "ldap"
          description: "OpenStack security group containing all firewall rules required by the IPA server/client communication. Example: ipa"
          type: str
        - name: os_subnet_dns_nameserver_ip_default_override
          default: "1.1.1.1"
          description: "Default DNS nameserver IPv4 address registered on the OpenStack subnet where the IPA server will run. Example: 1.1.1.1"
          type: str
        - name: os_subnet_dns_nameserver_ip_fallback_override
          default: "8.8.8.8"
          description: "Fallback DNS nameserver IPv4 address registered on the OpenStack subnet where the IPA server will run. Example: 8.8.8.8"
          type: str
        - name: ipa_admin_givenname_override
          default: "EWC"
          description: "Given name of the administrator to replace the default IPA admin (does not need to be a physical person). Example: EWC"
          type: str
        - name: ipa_admin_surname_override
          default: "IPAADMIN"
          description: "Surname of the administrator to replace the default IPA admin (does not need to belong to a physical person). Example: IPAADMIN"
          type: str
      _defaultSecurityGroups:
        - ldap
      maintainers:
        - name: EWC Team
          email: support@ewcloud.int
          url: https://github.com/ewcloud/ewc-flavours/issues
        - name: EWC Support Team
          email: testemail@ewcloud.int
          url: https://github.com/ewcloud/ewc-flavours/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/EWCLogo.png
      annotations:
        technology: "Ansible Playbook"
        category: "Security,Identity & Access Management"
        supportLevel: "EWC"
        licenseType: "MIT License"
      displayName: FreeIPA
      summary: Centralized identity, authentication, and access management solution based on FreeIPA.
      license: https://github.com/ewcloud/ewc-flavours/blob/main/LICENSE
      published: false
    jupyterhub-flavour:
      name: "jupyterhub-flavour"
      version: "1.0.0"
      description: |
        Installs and run JupyterHub on your instance, offering a convenient way to access it through the web.

        The default Authenticator uses PAM (Pluggable Authentication Module) to authenticate system users with their usernames and passwords.
        With the default Authenticator, any user with an account and password on the system will be allowed to login.
        See also [here](https://jupyterhub.readthedocs.io/en/5.2.1/tutorial/getting-started/authenticators-users-basics.html)

        Therefore in order to login you need to use username/password from a local user existing in the machine. 
      home: https://github.com/ewcloud/ewc-flavours
      sources:
        - https://github.com/ewcloud/ewc-flavours/blob/main/playbooks/jupyterhub-flavour/jupyterhub-flavour.yml
      inputs:
        - name: jupyterhub_local_cert_email
          description: "Email used for the certificate."
          type: str
        - name: dns_domain
          description: "DNS domain. If not present, it will try to guess from instance configured hostname in /etc/hostname."
          type: str
        - name: jupyterhub_local_env_wipe
          default: false
          description: "Boolean to decide whether to wipe the environment if exists prior to a reinstallation"
          type: bool
        - name: jupyterhub_local_env_name
          default: "jupyterhub-local"
          description: "Name of the environment containing the Jupyerhub."
          type: str
        - name: jupyterhub_local_test_cert
          default: false
          description: "Use Lets encrypt test certificate."
          type: bool
        - name: jupyterhub_local_with_otp
          default: false
          description: "Use OTP authentication for Jupyterhub. It requires manual run of google-authenticator by the user to configure your TOTP device after running this playbook"
          type: bool
        - name: conda_prefix
          default: "/opt/conda"
          description: "Prefix where conda is installed."
          type: str
        - name: conda_user
          default: "root"
          description: "User owning the conda installation. "
          type: str
      _defaultSecurityGroups:
        - ssh-http-https
      maintainers:
        - name: EWC Team
          email: support@ewcloud.int
          url: https://github.com/ewcloud/ewc-flavours/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/jupyterprob.jpg
      annotations:
        technology: "Ansible Playbook"
        category: "Compute,Data Visualization,Data Processing"
        supportLevel: "EWC"
        licenseType: "Apache License 2.0"
      displayName: JupyterHub Flavour
      summary: It installs and run jupyterhub on your instance, offering a convenient way to access it through the web.
      license: https://github.com/ewcloud/ewc-flavours/blob/main/LICENSE
      published: false
    ml-basic:
      name: "ml-basic"
      version: "1.0.0"
      description: |
        Create a conda environment with the basic Machine Learning packages such as torch, xgboost, and scikit-learn. Check `files/env.yml` for all the details on the software included.

        Requirements
        ------------
        This ansible role depends on ewc-ansible-role-conda

        Role Variables
        --------------
        - `ml_basic_env_wipe`: Boolean to decide whether to wipe the environment if exists prior to a reinstallation. Default: no
        - `ml_basic_env_name`: Name of the environment containing the software stack. Default: ml-basic
        - `ml_basic_env_path`: Path to the environment containing the software stack. Default: `{{ conda_prefix }}/envs/{{ ml_basic_env_name }}`
        - `ml_basic_create_ipykernel`: Boolean to create a system-wide kernel available. Default: yes
        - `conda_prefix`: Prefix where conda is installed. Default: `/opt/conda`
        - `conda_user`: User owning the conda installation. Default: `root`

        Example Playbook
        ----------------

            - hosts: all
              roles:
                -  ewc-ansible-role-ml-basic

        License
        -------

        Apache 2.0.

        Author Information
        ------------------

        ECMWF for the European Weather Cloud
        
        <img src="https://climate.copernicus.eu/sites/default/files/inline-images/ECMWF.png"  width="120px" height="120px"> 
        
        ![ewc logo](https://europeanweather.cloud/sites/default/files/images/cloud-data-network-SW-v3.png){width=120px  height=120px}

      home: https://github.com/ewcloud/ewc-ecmwf-ai-stacks
      sources:
        - https://github.com/ewcloud/ewc-ecmwf-ai-stacks/blob/main/ml-basic.yml
      maintainers:
        - name: EWC Team
          email: support@ewcloud.int
          url: https://github.com/ewcloud/ewc-ecmwf-ai-stacks/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/EWCLogo.png
      annotations:
        technology: "Ansible Playbook"
        category: "Machine Learning & AI, GPU-accelerated"
        supportLevel: "EWC"
        licenseType: "Apache License 2.0"
      displayName: ML Basic
      summary: It features an environment with the main machine learning packages like scikit-learn or torch.
      license: https://github.com/ewcloud/ewc-ecmwf-ai-stacks/blob/main/LICENSE
      published: false
    nwcsaf-datacube-xarray:
      name: "nwcsaf-datacube-xarray"
      version: "1.0.0"
      description: |
        Jupyter notebooks on using Icechunk, Virtualizar, and Kerchunk to enable Single-Point Access to Distributed Cloud Files through xarray.
      home: https://gitlab.aemet.es/jllisov/vzarr
      sources:
        - https://gitlab.aemet.es/jllisov/vzarr
      maintainers:
        - name: NWCSAF
          email: jllisov@aemet.es
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/NWCSAFLogo.png
      annotations:
        technology: "Jupyter Notebook"
        category: "Training,Data Access"
        supportLevel: "Community"
        licenseType: "MIT"
      displayName: NWCSAF Datacube Xarray
      summary: Jupyter Notebooks for Unlocking Large Datasets on Cloud-Native Data Workflows.
      license: https://gitlab.aemet.es/jllisov/vzarr/-/blob/main/LICENSE
      published: true
    openstack-compute:
      name: "openstack-compute"
      version: "1.0.0"
      description: |
        Pre-configured instance for deploying and managing OpenStack compute resources using Terraform.
      home: https://github.com/ewcloud/openstack-compute
      sources:
        - https://github.com/ewcloud/openstack-compute
      maintainers:
        - name: EWC Team
          email: support@ewcloud.int
          url: https://github.com/ewcloud/openstack-compute/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/EWCLogo.png
      annotations:
        technology: "Terraform Module"
        category: "Compute"
        supportLevel: "EWC"
        licenseType: "MIT License"
      displayName: Openstack Compute
      summary: Pre-configured instance for deploying and managing OpenStack compute resources using Terraform.
      license: https://github.com/ewcloud/openstack-compute/blob/main/LICENSE
      published: false
    pytroll:
      name: "pytroll"
      version: "1.0.0"
      description: |
        Playbooks to install pytroll processing and wms in the EWC
      home: https://github.com/nordsat/ewc-playbooks
      sources:
        - https://github.com/nordsat/ewc-playbooks/blob/main/satellite-data-processing-main.yaml
      maintainers:
        - name: NORDSAT
          url: https://github.com/nordsat/ewc-playbooks/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/pytrollLogo.png
      annotations:
        technology: "Ansible Playbook"
        category: "Compute,Data Processing"
        supportLevel: "Community"
        licenseType: "GNU General Public License v3.0"
      displayName: Pytroll Processing
      summary: Playbooks to install pytroll processing and wms in the EWC.
      license: https://github.com/nordsat/ewc-playbooks/blob/main/LICENSE
      published: false
    remote-desktop:
      name: "remote-desktop"
      version: "1.0.0"
      description: |
        Virtual desktop instance providing remote graphical access to applications and development environments.
      home: https://github.com/ewcloud/ewc-flavours
      sources:
        - https://github.com/ewcloud/ewc-flavours/blob/main/remote-desktop.yml
      inputs:
        - name: password_allowed_ip_ranges
          description: "IP ranges (in CIDR format) to be allowed for password access in SSHD configuration."
          type: List[str]
      maintainers:
        - name: EWC Team
          email: support@ewcloud.int
          url: https://github.com/ewcloud/ewc-flavours/issues
        - name: EWC Support Team
          email: testemail@ewcloud.int
          url: https://github.com/ewcloud/ewc-flavours/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/EWCLogo.png
      annotations:
        technology: "Ansible Playbook,Helm Charts"
        category: "Remote Access & Desktop"
        supportLevel: "EWC"
        licenseType: "MIT License"
      displayName: Remote Desktop
      summary: Virtual desktop instance providing remote graphical access to applications and development environments.
      license: https://github.com/ewcloud/ewc-flavours/blob/main/LICENSE
      published: false
    ssh-bastion:
      name: "ssh-bastion"
      version: "1.0.0"
      description: |
        The SSH bastion/proxy is the barrier between your internal machines (without public or floating IPs) and the public internet.
        With the SSH bastion, you'll have an extra layer of security on top of your VMs.
        It's equipped with fail2ban, automatic security updates and more.
      home: https://github.com/ewcloud/ewc-flavours
      sources:
        - https://github.com/ewcloud/ewc-flavours/blob/main/ssh-bastion-flavour.yml
      inputs:
        - name: password_allowed_ip_ranges
          description: "IP ranges (in CIDR format) to be allowed for password access in SSHD configuration."
          type: List[str]
      maintainers:
        - name: EWC Team
          email: support@ewcloud.int
          url: https://github.com/ewcloud/ewc-flavours/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/EWCLogo.png
      annotations:
        technology: "Ansible Playbook"
        category: "Remote Access & Desktop"
        supportLevel: "EWC"
        licenseType: "MIT License"
      displayName: SSH bastion
      summary: Barrier between your internal machines (without public or floating IPs) and the public internet.
      license: https://github.com/ewcloud/ewc-flavours/blob/main/LICENSE
      published: false
    to-be-remove1:
      name: "test-unpublished"
      version: "1.0.0"
      description: |
        EWC Test for EWC Community Hub
      home: https://github.com/ewcloud/ewc-flavours
      sources:
        - https://github.com/ewcloud/ewc-flavours/blob/main/eumetcast-terrestrial.yml
      maintainers:
        - name: EWC Team
          email: support@ewcloud.int
          url: https://github.com/ewcloud/ewc-flavours/issues
        - name: EWC Support Team
          email: testemail@ewcloud.int
          url: https://github.com/ewcloud/ewc-flavours/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/EWCLogo.png
      annotations:
        technology: "Ansible Playbook, Helm Charts"
        category: "Networking,Data Reception"
        supportLevel: "EWC"
        licenseType: "MIT License"
        others: "Earth Observation,Eumetcast Terrestrial"
      displayName: EUMETCast Terrestrial
      summary: EWC Test for EWC Community Hub
      license: https://github.com/ewcloud/ewc-flavours/blob/main/LICENSE
    to-be-remove2:
      name: "test-unpublished"
      version: "1.0.0"
      description: |
        EWC Test for EWC Community Hub
      home: https://github.com/ewcloud/ewc-flavours
      sources:
        - https://github.com/ewcloud/ewc-flavours/blob/main/eumetcast-terrestrial.yml
      maintainers:
        - name: EWC Team
          email: support@ewcloud.int
          url: https://github.com/ewcloud/ewc-flavours/issues
        - name: EWC Support Team
          email: testemail@ewcloud.int
          url: https://github.com/ewcloud/ewc-flavours/issues
      icon: https://raw.githubusercontent.com/ewcloud/ewc-community-hub/refs/heads/main/logos/EWCLogo.png
      annotations:
        technology: "Ansible Playbook, Terraform Module"
        category: "Networking,Data Reception"
        supportLevel: "EWC"
        licenseType: "MIT License"
        others: "Earth Observation,Eumetcast Terrestrial"
      displayName: EUMETCast Terrestrial
      summary: EWC Test for EWC Community Hub
      license: https://github.com/ewcloud/ewc-flavours/blob/main/LICENSE
